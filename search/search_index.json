{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bem-vindo ao HowTo Dev!","text":"<p>Voc\u00ea est\u00e1 pronto para dominar o desenvolvimento web e se tornar um mestre em Angular, HTML, CSS, JavaScript, TypeScript e muito mais? Ent\u00e3o voc\u00ea est\u00e1 no lugar certo!</p> <p>No HowTo Dev, nossa miss\u00e3o \u00e9 simplificar o aprendizado e transformar conceitos complexos em tutoriais claros e pr\u00e1ticos. Se voc\u00ea \u00e9 um iniciante dando seus primeiros passos ou um desenvolvedor experiente procurando aprimorar suas habilidades, temos algo para voc\u00ea.</p>"},{"location":"#o-que-voce-vai-encontrar-aqui","title":"O que voc\u00ea vai encontrar aqui","text":"<ul> <li>Tutoriais Passo a Passo: Guias detalhados que levam voc\u00ea do b\u00e1sico ao avan\u00e7ado.</li> <li>Exemplos Pr\u00e1ticos: C\u00f3digo real e projetos para voc\u00ea entender como tudo funciona na pr\u00e1tica.</li> <li>Melhores Pr\u00e1ticas: Dicas e truques para escrever um c\u00f3digo limpo e eficiente.</li> <li>Recursos \u00dateis: Links, ferramentas e refer\u00eancias para apoiar seu aprendizado cont\u00ednuo.</li> </ul> <p>Prepare-se para embarcar em uma jornada de conhecimento e inova\u00e7\u00e3o. Vamos codar juntos e construir o futuro da web!</p>"},{"location":"angular/","title":"Angular","text":""},{"location":"css/","title":"CSS","text":""},{"location":"css/#o-que-e","title":"O que \u00e9?","text":"<p>Cascading Style Sheets ou CSS \u00e9 uma linguagem que os desenvolvedores da web usam para estilizar o conte\u00fado HTML em uma p\u00e1gina da web. Se voc\u00ea estiver interessado em modificar cores, tipos de fonte, tamanhos de fonte, imagens, posicionamento de elementos e muito mais, CSS \u00e9 a ferramenta para o trabalho!</p>"},{"location":"css/#anatomia","title":"Anatomia","text":"<p>O diagrama \u00e0 direita mostra dois m\u00e9todos diferentes, ou sintaxes, para escrever c\u00f3digo CSS. A primeira sintaxe mostra CSS aplicado como um conjunto de regras, enquanto a segunda mostra que ele foi escrito como um estilo inline. Dois m\u00e9todos diferentes de escrever CSS podem parecer um pouco intimidadores no come\u00e7o, mas n\u00e3o \u00e9 t\u00e3o ruim quanto parece!</p> <p>Ambos os m\u00e9todos cont\u00eam recursos comuns em sua anatomia. Observe como ambas as sintaxes cont\u00eam uma declara\u00e7\u00e3o. As declara\u00e7\u00f5es s\u00e3o o n\u00facleo do CSS. Elas aplicam um estilo ao elemento selecionado. Aqui, o elemento <code>&lt;p&gt;</code> foi selecionado em ambas as sintaxes e ser\u00e1 estilizado para exibir o texto em azul.</p> <p>Entender que uma declara\u00e7\u00e3o \u00e9 usada para estilizar um elemento selecionado \u00e9 essencial para aprender a estilizar documentos HTML com CSS! Os termos abaixo explicam cada um dos r\u00f3tulos no diagrama \u00e0 direita.</p> <p>Termos do conjunto de regras:</p> <ul> <li>Seletor \u2014 O in\u00edcio do conjunto de regras usado para direcionar o elemento que ser\u00e1 estilizado.</li> <li>Bloco de declara\u00e7\u00e3o \u2014 O c\u00f3digo entre (e incluindo) as chaves ({ }) que cont\u00e9m a(s) declara\u00e7\u00e3o(\u00f5es) CSS.</li> <li>Declara\u00e7\u00e3o \u2014 O nome do grupo para um par de propriedade e valor que aplica um estilo ao elemento selecionado.</li> <li>Propriedade \u2014 A primeira parte da declara\u00e7\u00e3o que significa qual caracter\u00edstica visual do elemento deve ser modificada.</li> <li>Valor \u2014 A segunda parte da declara\u00e7\u00e3o que significa o valor da propriedade.</li> </ul> <p>Termos de estilo em linha:</p> <ul> <li>Tag de abertura \u2014 O in\u00edcio de um elemento HTML. Este \u00e9 o elemento que ser\u00e1 estilizado.</li> <li>Atributo \u2014 O atributo de estilo \u00e9 usado para adicionar estilos CSS em linha a um elemento HTML.</li> <li>Declara\u00e7\u00e3o \u2014 O nome do grupo para um par de propriedade e valor que aplica um estilo ao elemento selecionado.</li> <li>Propriedade \u2014 A primeira parte da declara\u00e7\u00e3o que significa qual caracter\u00edstica visual do elemento deve ser modificada.</li> <li>Valor \u2014 A segunda parte da declara\u00e7\u00e3o que significa o valor da propriedade.</li> </ul> <p>N\u00e3o se preocupe em memorizar tudo isso \u2014 voc\u00ea se familiarizar\u00e1 com eles cada vez mais conforme voc\u00ea pratica!</p>"},{"location":"css/proposito/","title":"O Proposito","text":"<p>O objetivo do CSS \u00e9 adicionar estilo \u00e0 p\u00e1gina da web, e cada elemento da p\u00e1gina pode ter muitas propriedades de estilo. Algumas das propriedades b\u00e1sicas est\u00e3o relacionadas ao tamanho, estilo e cor do elemento.</p>"},{"location":"css/proposito/#declaracao","title":"Declara\u00e7\u00e3o","text":"<p>Uma declara\u00e7\u00e3o \u00e9 o par chave-valor de uma propriedade CSS e seu valor. As declara\u00e7\u00f5es CSS s\u00e3o usadas para definir propriedades de estilo e construir regras a serem aplicadas a elementos individuais ou grupos de elementos. O nome e o valor da propriedade s\u00e3o separados por dois pontos e toda a declara\u00e7\u00e3o deve ser finalizada por ponto e v\u00edrgula.</p>"},{"location":"css/proposito/background-color/","title":"Background Color","text":"<p>A propriedade CSS background-color controla a cor de fundo dos elementos.</p> <pre><code>background-color: blue;\n</code></pre>"},{"location":"css/proposito/background-image/","title":"Background Image","text":"<p>A propriedade CSS background-image define a imagem de fundo de um elemento. Um URL de imagem deve ser fornecido na sintaxe url(\"moon.jpg\") como o valor da propriedade.</p> <pre><code>background-image: url(\"nyan-cat.gif\");\n</code></pre>"},{"location":"css/proposito/color/","title":"Color","text":"<p>Usando a propriedade color, a cor do texto de primeiro plano de um elemento pode ser definida em CSS. O valor pode ser um nome de cor v\u00e1lido compat\u00edvel com CSS, como verde ou azul. Al\u00e9m disso, c\u00f3digos de cores de 3 ou 6 d\u00edgitos, como #22f ou #2a2aff, podem ser usados \u200b\u200bpara definir a cor.</p> <pre><code>p {\n  color : #2a2aff ;\n}\n\nspan {\n  color : green ;\n}\n</code></pre>"},{"location":"css/proposito/font-family/","title":"Font Family","text":"<p>A propriedade CSS font-family \u00e9 usada para especificar o tipo de letra em um conjunto de regras. As fontes devem estar dispon\u00edveis para o navegador para serem exibidas corretamente, seja no computador ou vinculadas como uma fonte da web. Se um valor de fonte n\u00e3o estiver dispon\u00edvel, os navegadores exibir\u00e3o sua fonte padr\u00e3o. Ao usar um nome de fonte com v\u00e1rias palavras, \u00e9 uma pr\u00e1tica recomendada coloc\u00e1-los entre aspas.</p> <pre><code>h2 {\n  font-family: Verdana;\n}\n\n#page-title {\n  font-family: \"Courier New\";\n}\n</code></pre>"},{"location":"css/proposito/font-size/","title":"Font Size","text":"<p>A propriedade CSS font-size \u00e9 usada para definir tamanhos de texto. Os valores do tamanho da fonte podem ter muitas unidades ou tipos diferentes, como pixels.</p> <pre><code>font-size: 30px;\n</code></pre>"},{"location":"css/proposito/font-weight/","title":"Font Weight","text":"<p>A propriedade CSS font-weight pode ser usada para definir o peso (negrito) do texto. O valor fornecido pode ser uma palavra-chave como negrito ou normal.</p> <pre><code>font-weight: bold;\n</code></pre>"},{"location":"css/proposito/important/","title":"!important","text":"<p>A regra CSS !important \u00e9 usada em declara\u00e7\u00f5es para substituir quaisquer outras declara\u00e7\u00f5es de uma propriedade e ignorar a especificidade do seletor. !important regras garantir\u00e3o que uma declara\u00e7\u00e3o espec\u00edfica sempre se aplique aos elementos correspondentes. No entanto, geralmente \u00e9 bom evitar usar !important como m\u00e1 pr\u00e1tica.</p> <pre><code>\n#column-one {\n  width: 200px !important;\n}\n\n.post-title {\n  color: blue !important;\n}\n</code></pre>"},{"location":"css/proposito/opacity/","title":"Opacity","text":"<p>A propriedade CSS opacity pode ser usada para controlar a transpar\u00eancia de um elemento. O valor desta propriedade varia de 0 (transparente) a 1 (opaco).</p> <pre><code>opacity: 0.5;\n</code></pre>"},{"location":"css/proposito/sets/","title":"Multiplos Seletores","text":"<p>Um conjunto de regras CSS cont\u00e9m um ou mais seletores e uma ou mais declara\u00e7\u00f5es. O(s) seletor(es), que neste exemplo \u00e9 h1, aponta para um elemento HTML. A(s) declara\u00e7\u00e3o(\u00f5es), que neste exemplo s\u00e3o color: blue e text-align: center estilizam o elemento com uma propriedade e um valor. O conjunto de regras \u00e9 o principal alicerce de uma planilha CSS.</p> <pre><code>h1 {\n  color: blue;\n  text-align: center;\n}\n</code></pre>"},{"location":"css/proposito/text-align/","title":"Text Align","text":"<p>A propriedade CSS text-align pode ser usada para definir o alinhamento do texto do conte\u00fado embutido. Esta propriedade pode ser definida com estes valores: esquerda, direita ou centro.</p> <pre><code>text-align: right;\n</code></pre>"},{"location":"css/proposito/urls/","title":"URLs","text":"<p>Em CSS, a fun\u00e7\u00e3o url() \u00e9 usada para agrupar URLs de recursos. Eles podem ser aplicados a diversas propriedades, como a imagem de fundo.</p> <pre><code>background-image: url(\"../resources/image.png\");\n</code></pre>"},{"location":"css/seletores/atributos/","title":"Seletores","text":""},{"location":"css/seletores/atributos/#atributos","title":"Atributos","text":"<p>Voc\u00ea pode se lembrar de que alguns elementos HTML usam atributos para adicionar detalhes ou funcionalidades extras ao elemento. Alguns atributos familiares podem ser href e src, mas h\u00e1 muitos mais, incluindo class e id!</p> <p>O seletor de atributos pode ser usado para direcionar elementos HTML que j\u00e1 cont\u00eam atributos. Elementos do mesmo tipo podem ser direcionados de forma diferente por seu atributo ou valor de atributo. Isso alivia a necessidade de adicionar novo c\u00f3digo, como os atributos class ou id.</p> <p>Os atributos podem ser selecionados de forma semelhante a tipos, classes e IDs.</p> <pre><code>[href]{\n  color: magenta;\n}\n</code></pre> <p>A sintaxe mais b\u00e1sica \u00e9 um atributo cercado por colchetes. No exemplo acima: <code>[href]</code> direcionaria todos os elementos com um atributo href e definiria a cor como magenta.</p> <p>E pode ficar mais granular a partir da\u00ed adicionando valores de tipo e/ou atributo. Uma maneira \u00e9 usando <code>type[attribute*=value]</code>. Em resumo, este c\u00f3digo seleciona um elemento onde o atributo cont\u00e9m qualquer inst\u00e2ncia do valor especificado. Vamos dar uma olhada em um exemplo.</p> <pre><code>&lt;img src='/images/seasons/cold/winter.jpg'&gt;\n&lt;img src='/images/seasons/warm/summer.jpg'&gt;\n</code></pre> <p>O c\u00f3digo HTML acima renderiza dois elementos <code>&lt;img&gt;</code>, cada um contendo um atributo src com um valor que equivale a um link para um arquivo de imagem.</p> <pre><code>img[src*='winter'] {\n  height: 50px;\n}\n\nimg[src*='summer'] {\n  height: 100px;\n}\n</code></pre> <p>Agora d\u00ea uma olhada no c\u00f3digo CSS acima. O seletor de atributos \u00e9 usado para direcionar cada imagem individualmente.</p> <p>O primeiro conjunto de regras procura um elemento img com um atributo src que cont\u00e9m a string 'winter' e define a altura para 50px.</p> <p>O segundo conjunto de regras procura um elemento img com um atributo src que cont\u00e9m a string 'summer' e define a altura para 100px.</p> <p>Observe como nenhuma nova marca\u00e7\u00e3o HTML (como uma classe ou id) precisou ser adicionada, e ainda conseguimos modificar os estilos de cada imagem independentemente. Essa \u00e9 uma vantagem de usar o seletor de atributos!</p>"},{"location":"css/seletores/classe/","title":"Seletores","text":""},{"location":"css/seletores/classe/#classe","title":"Classe","text":"<p>CSS n\u00e3o se limita a selecionar elementos por seu tipo. Como voc\u00ea sabe, elementos HTML tamb\u00e9m podem ter atributos. Ao trabalhar com HTML e CSS, um atributo de classe \u00e9 uma das maneiras mais comuns de selecionar um elemento.</p> <p>Por exemplo, considere o seguinte HTML:</p> <p><code>&lt;p class='marca'&gt;Nike&lt;/p&gt;</code></p> <p>O elemento de par\u00e1grafo no exemplo acima tem um atributo de classe dentro da tag de abertura do elemento <code>&lt;p&gt;</code>. O atributo de <code>class</code> \u00e9 definido como <code>'marca'</code>. Para selecionar este elemento usando CSS, podemos criar um conjunto de regras com um seletor de classe de <code>.marca</code>.</p> <pre><code>.marca {\n\n}\n</code></pre> <p>Para selecionar um elemento HTML por sua classe usando CSS, um ponto (.) deve ser prefixado ao nome da classe. No exemplo acima, a classe \u00e9 <code>marca</code>, ent\u00e3o o seletor CSS para ela \u00e9 <code>.marca</code>.</p>"},{"location":"css/seletores/classes-ids/","title":"Seletores","text":""},{"location":"css/seletores/classes-ids/#classes-e-ids","title":"Classes e Ids","text":"<p>O CSS pode selecionar elementos HTML por tipo, classe e ID. As classes e IDs CSS t\u00eam prop\u00f3sitos diferentes, o que pode afetar qual voc\u00ea usa para estilizar elementos HTML.</p> <p>As classes CSS devem ser reutilizadas em muitos elementos. Ao escrever classes CSS, voc\u00ea pode estilizar elementos de v\u00e1rias maneiras misturando classes.</p> <p>Por exemplo, imagine uma p\u00e1gina com dois t\u00edtulos. Um t\u00edtulo precisa ser negrito e azul, e o outro precisa ser negrito e verde. Em vez de escrever regras CSS separadas para cada t\u00edtulo que repetem o c\u00f3digo um do outro, \u00e9 melhor escrever uma regra CSS <code>.negrito</code>, uma regra CSS <code>.verde</code> e uma regra CSS <code>.azul</code>. Ent\u00e3o voc\u00ea pode dar a um t\u00edtulo as classes verde negrito e ao outro as classes azul negrito.</p> <p>Embora as classes devam ser usadas muitas vezes, um ID deve estilizar apenas um elemento. Os IDs substituem os estilos de tipos e classes. Como os IDs substituem esses estilos, eles devem ser usados \u200b\u200bcom modera\u00e7\u00e3o e apenas em elementos que precisam sempre parecer iguais.</p>"},{"location":"css/seletores/descendentes/","title":"Seletores","text":""},{"location":"css/seletores/descendentes/#descendentes","title":"Descendentes","text":"<p>Al\u00e9m de encadear seletores para selecionar elementos, o CSS tamb\u00e9m suporta a sele\u00e7\u00e3o de elementos aninhados em outros elementos HTML, tamb\u00e9m conhecidos como descendentes. Por exemplo, considere o seguinte HTML:</p> <pre><code>&lt;ul class='main-list'&gt;\n  &lt;li&gt; ... &lt;/li&gt;\n  &lt;li&gt; ... &lt;/li&gt;\n  &lt;li&gt; ... &lt;/li&gt;\n&lt;/ul&gt;\n</code></pre> <p>Os elementos <code>&lt;li&gt;</code> aninhados s\u00e3o descendentes do elemento <code>&lt;ul&gt;</code> e podem ser selecionados com o combinador descendente como:</p> <pre><code>.main-list li {\n\n}\n</code></pre> <p>No exemplo acima, <code>.main-list</code> seleciona o elemento com a classe <code>.main-list</code> (o elemento <code>&lt;ul&gt;</code>). Os <code>&lt;li&gt;</code> descendentes s\u00e3o selecionados adicionando li ao seletor, separados por um espa\u00e7o. Isso resulta em <code>.main-list li</code> como o seletor final.</p> <p>Selecionar elementos dessa forma pode tornar nossos seletores ainda mais espec\u00edficos, garantindo que eles apare\u00e7am no contexto que esperamos.</p>"},{"location":"css/seletores/encadeamento-especificidade/","title":"Seletor","text":""},{"location":"css/seletores/encadeamento-especificidade/#encadeamento-e-especificidade","title":"Encadeamento e Especificidade","text":"<p>Na \u00faltima se\u00e7\u00e3o, em vez de selecionar todos os elementos <code>&lt;h5&gt;</code>, selecionamos apenas os elementos <code>&lt;h5&gt;</code> aninhados dentro dos elementos <code>.description</code>. Este seletor CSS era mais espec\u00edfico do que escrever apenas <code>h5</code>. Adicionar mais de uma tag, classe ou ID a um seletor CSS aumenta a especificidade do seletor CSS.</p> <p>Por exemplo, considere o seguinte CSS:</p> <pre><code>p {\n  color: blue;\n}\n\n.main p {\n  color: red;\n}\n</code></pre> <p>Ambas as regras CSS definem como um elemento <code>&lt;p&gt;</code> deve se parecer. Como <code>.main p</code> tem uma classe e um tipo <code>p</code> como seu seletor, apenas os elementos <code>&lt;p&gt;</code> dentro do elemento <code>.main</code> aparecer\u00e3o em vermelho. Isso ocorre apesar de haver outra regra mais geral que afirma que os elementos <code>&lt;p&gt;</code> devem ser azuis.</p>"},{"location":"css/seletores/encadeamento/","title":"Seletores","text":""},{"location":"css/seletores/encadeamento/#encadeamento","title":"Encadeamento","text":"<p>Ao escrever regras CSS, \u00e9 poss\u00edvel exigir que um elemento HTML tenha dois ou mais seletores CSS ao mesmo tempo.</p> <p>Isso \u00e9 feito combinando v\u00e1rios seletores, o que chamaremos de encadeamento. Por exemplo, se houvesse uma classe especial para elementos <code>&lt;h1&gt;</code>, o CSS ficaria assim:</p> <pre><code>h1.special {\n\n}\n</code></pre> <p>O c\u00f3digo acima selecionaria apenas os elementos <code>&lt;h1&gt;</code> com uma classe especial. Se um elemento <code>&lt;p&gt;</code> tamb\u00e9m tivesse uma classe especial, a regra no exemplo n\u00e3o estilizaria o par\u00e1grafo.</p>"},{"location":"css/seletores/especificidade/","title":"Seletores","text":""},{"location":"css/seletores/especificidade/#especificidade","title":"Especificidade","text":"<p>Especificidade \u00e9 a ordem pela qual o navegador decide quais estilos CSS ser\u00e3o exibidos. Uma pr\u00e1tica recomendada em CSS \u00e9 estilizar elementos usando o menor grau de especificidade para que, se um elemento precisar de um novo estilo, seja f\u00e1cil substitu\u00ed-lo.</p> <p>IDs s\u00e3o o seletor mais espec\u00edfico em CSS, seguidos por classes e, finalmente, tipo. Por exemplo, considere o seguinte HTML e CSS:</p> <p><code>&lt;h1 class='headline'&gt;Not\u00edcias de \u00faltima hora&lt;/h1&gt;</code></p> <pre><code>h1 {\n  color: red;\n}\n\n.headline {\n  color: firebrick;\n}\n</code></pre> <p>No c\u00f3digo de exemplo acima, a cor do t\u00edtulo seria definida como firebrick, pois o seletor de classe \u00e9 mais espec\u00edfico do que o seletor de tipo. Se um atributo de ID (e seletor) fosse adicionado ao c\u00f3digo acima, os estilos dentro do corpo do seletor de ID substituiriam todos os outros estilos para o t\u00edtulo.</p> <p>Com o tempo, conforme os arquivos crescem com o c\u00f3digo, muitos elementos podem ter IDs, o que pode tornar o CSS dif\u00edcil de editar, j\u00e1 que um estilo novo e mais espec\u00edfico deve ser criado para alterar o estilo de um elemento.</p> <p>Para tornar os estilos f\u00e1ceis de editar, \u00e9 melhor estilizar com um seletor de tipo, se poss\u00edvel. Caso contr\u00e1rio, adicione um seletor de classe. Se isso n\u00e3o for espec\u00edfico o suficiente, considere usar um seletor de ID.</p>"},{"location":"css/seletores/id/","title":"Seletores","text":""},{"location":"css/seletores/id/#id","title":"ID","text":"<p>Muitas vezes \u00e9 importante selecionar um \u00fanico elemento com CSS para dar a ele seu pr\u00f3prio estilo \u00fanico. Se um elemento HTML precisa ser estilizado de forma \u00fanica, podemos dar a ele um ID usando o atributo id.</p> <p><code>&lt;h1 id='titulo-grande'&gt; ... &lt;/h1&gt;</code></p> <p>Ao contr\u00e1rio da classe que aceita v\u00e1rios valores e pode ser usada amplamente em um documento HTML, o id de um elemento pode ter apenas um \u00fanico valor e ser usado apenas uma vez por p\u00e1gina.</p> <p>Para selecionar o ID de um elemento com CSS, acrescentamos ao nome do id um sinal num\u00e9rico (#). Por exemplo, se quis\u00e9ssemos selecionar o elemento HTML no exemplo acima, ficaria assim:</p> <pre><code>#titulo-grande {\n\n}\n</code></pre> <p>O nome do id \u00e9 titulo-grande, portanto, o seletor CSS para ele \u00e9 <code>#titulo-grande</code>.</p>"},{"location":"css/seletores/multi-classes/","title":"Seletores","text":""},{"location":"css/seletores/multi-classes/#multiplas-classes","title":"Multiplas Classes","text":"<p>Podemos usar CSS para selecionar o atributo de classe de um elemento HTML pelo nome. E at\u00e9 agora, selecionamos elementos usando apenas um nome de classe por elemento. Se cada elemento HTML tivesse uma \u00fanica classe, todas as informa\u00e7\u00f5es de estilo para cada elemento exigiriam uma nova classe.</p> <p>Felizmente, \u00e9 poss\u00edvel adicionar mais de um nome de classe ao atributo de classe de um elemento HTML.</p> <p>Por exemplo, talvez haja um elemento de t\u00edtulo que precise ser verde e em negrito. Voc\u00ea pode escrever dois conjuntos de regras CSS assim:</p> <pre><code>.verde {\n  color: green;\n}\n\n.negrito {\n  font-weight: bold;\n}\n</code></pre> <p>Ent\u00e3o, voc\u00ea pode incluir ambas as classes em um elemento HTML assim:</p> <p><code>&lt;h1 class=\"verde negrito\"&gt; ... &lt;/h1&gt;</code></p>  Ol\u00e1  <p>Podemos adicionar v\u00e1rias classes ao atributo de classe de um elemento HTML separando-as com um espa\u00e7o. Isso nos permite misturar e combinar classes CSS para criar muitos estilos exclusivos sem escrever uma classe personalizada para cada combina\u00e7\u00e3o de estilo necess\u00e1ria.</p>"},{"location":"css/seletores/multi-seletores/","title":"Seletores","text":""},{"location":"css/seletores/multi-seletores/#multiplos-seletores","title":"Multiplos Seletores","text":"<p>Para tornar o CSS mais conciso, \u00e9 poss\u00edvel adicionar estilos CSS a v\u00e1rios seletores CSS de uma s\u00f3 vez. Isso evita escrever c\u00f3digo repetitivo.</p> <p>Por exemplo, o c\u00f3digo a seguir tem atributos de estilo repetitivos:</p> <pre><code>h1 {\n  font-family: Georgia;\n}\n\n.menu {\n  font-family: Georgia;\n}\n</code></pre> <p>Em vez de escrever <code>font-family: Georgia</code> duas vezes para dois seletores, podemos separar os seletores por uma v\u00edrgula para aplicar o mesmo estilo a ambos, assim:</p> <pre><code>h1,\n.menu {\n  font-family: Georgia;\n}\n</code></pre> <p>Ao separar os seletores CSS com uma v\u00edrgula, tanto os elementos <code>&lt;h1&gt;</code> quanto os elementos com a classe menu receber\u00e3o o estilo <code>font-family: Georgia</code>.</p>"},{"location":"css/seletores/pseudo-classe/","title":"Seletores","text":""},{"location":"css/seletores/pseudo-classe/#pseudo-classes","title":"Pseudo Classes","text":"<p>Voc\u00ea pode ter observado como a apar\u00eancia de certos elementos pode mudar, ou estar em um estado diferente, ap\u00f3s certas intera\u00e7\u00f5es do usu\u00e1rio. Por exemplo:</p> <p>Quando voc\u00ea clica em um elemento <code>&lt;input&gt;</code>, e uma borda azul \u00e9 adicionada mostrando que ele est\u00e1 em foco.</p> <p>Quando voc\u00ea clica em um link azul <code>&lt;a&gt;</code> para visitar outra p\u00e1gina, mas quando voc\u00ea retorna o texto do link \u00e9 roxo.</p> <p>Quando voc\u00ea est\u00e1 preenchendo um formul\u00e1rio e o bot\u00e3o de envio est\u00e1 acinzentado e desabilitado. Mas quando todos os campos foram preenchidos, o bot\u00e3o tem uma cor mostrando que est\u00e1 ativo.</p> <p>Esses s\u00e3o todos exemplos de seletores de pseudoclasse em a\u00e7\u00e3o! Na verdade, <code>:focus</code>, <code>:visited</code>, <code>:disabled</code> e <code>:active</code> s\u00e3o todos pseudo classes. Fatores como intera\u00e7\u00e3o do usu\u00e1rio, navega\u00e7\u00e3o no site e posi\u00e7\u00e3o na \u00e1rvore de documentos podem dar aos elementos um estado diferente com pseudoclasse.</p> <p>Uma pseudo classe pode ser anexada a qualquer seletor. \u00c9 sempre escrito como dois pontos : seguido por um nome. Por exemplo, <code>p:hover</code>.</p> <pre><code>p:hover {\n  background-color: lime;\n}\n</code></pre> <p>No c\u00f3digo acima, sempre que o mouse passar sobre um elemento de par\u00e1grafo, esse par\u00e1grafo ter\u00e1 um fundo cor de lim\u00e3o.</p>"},{"location":"css/seletores/tipo/","title":"Seletores","text":""},{"location":"css/seletores/tipo/#tipo","title":"Tipo","text":"<p>Lembre-se de que as declara\u00e7\u00f5es s\u00e3o uma parte fundamental do CSS porque aplicam um estilo a um elemento selecionado. Mas como voc\u00ea decide quais elementos receber\u00e3o o estilo? Com \u200b\u200bum seletor.</p> <p>Um seletor \u00e9 usado para direcionar o(s) elemento(s) HTML espec\u00edfico(s) a ser(em) estilizado(s) pela declara\u00e7\u00e3o. Um seletor com o qual voc\u00ea j\u00e1 deve estar familiarizado \u00e9 o seletor de tipo. Assim como o nome sugere, o seletor de tipo corresponde ao tipo do elemento no documento HTML.</p> <p>Na se\u00e7\u00e3o anterior, havia um elemento de par\u00e1grafo na cor vermelha.</p> <pre><code>p {\n  color: red;\n}\n</code></pre> <p>Esta \u00e9 uma inst\u00e2ncia do uso do seletor de tipo! O tipo de elemento \u00e9 p, que vem do elemento HTML <code>&lt;p&gt;</code>.</p> <p>Algumas notas importantes sobre o seletor de tipo:</p> <p>O seletor de tipo n\u00e3o inclui os colchetes angulares. Como os tipos de elementos s\u00e3o frequentemente referenciados pelo nome da tag de abertura, o seletor de tipo \u00e0s vezes \u00e9 referenciado como o nome da tag ou seletor de elemento.</p>"},{"location":"css/seletores/universal/","title":"Seletores","text":""},{"location":"css/seletores/universal/#universal","title":"Universal","text":"<p>Voc\u00ea aprendeu como o seletor de tipo seleciona todos os elementos de um determinado tipo. Bem, o seletor universal seleciona todos os elementos de qualquer tipo.</p> <p>A segmenta\u00e7\u00e3o de todos os elementos na p\u00e1gina tem alguns casos de uso espec\u00edficos, como redefinir o estilo padr\u00e3o do navegador ou selecionar todos os filhos de um elemento pai. N\u00e3o se preocupe se voc\u00ea n\u00e3o entender os casos de uso agora \u2014 falaremos sobre eles mais tarde em nossa jornada Learn CSS.</p> <p>O seletor universal usa o caractere <code>*</code> no mesmo lugar onde voc\u00ea especificou o seletor de tipo em um conjunto de regras, assim:</p> <pre><code>* {\n  font-family: Verdana;\n}\n</code></pre> <p>No c\u00f3digo acima, cada elemento de texto na p\u00e1gina ter\u00e1 sua fonte alterada para <code>Verdana</code>.</p>"},{"location":"css/sintaxe-base/estilo-linha/","title":"Sintaxe Basica","text":""},{"location":"css/sintaxe-base/estilo-linha/#estilo-em-linha","title":"Estilo em linha","text":"<p>Embora CSS seja uma linguagem diferente de HTML, \u00e9 poss\u00edvel escrever c\u00f3digo CSS diretamente dentro do c\u00f3digo HTML usando estilos inline.</p> <p>Para estilizar um elemento HTML, voc\u00ea pode adicionar o atributo style diretamente \u00e0 tag de abertura. Depois de adicionar o atributo, voc\u00ea pode defini-lo como igual ao(s) estilo(s) CSS que voc\u00ea gostaria de aplicar a esse elemento.</p> <pre><code>&lt;p style='color: red;'&gt;Estou aprendendo a programar!&lt;/p&gt;\n</code></pre> <p>Estou aprendendo a programar!</p> <p>O c\u00f3digo no exemplo acima demonstra como usar o estilo inline. O elemento paragraph tem um atributo style dentro de sua tag de abertura. Em seguida, o atributo <code>style</code> \u00e9 definido como igual a <code>color: red;</code>, que definir\u00e1 a cor do texto do par\u00e1grafo como vermelho dentro do navegador.</p> <p>Se voc\u00ea quiser adicionar mais de um estilo com estilos inline, basta continuar adicionando ao atributo style. Certifique-se de terminar os estilos com um ponto e v\u00edrgula (;).</p> <pre><code>&lt;p style='color: red; font-size: 20px;'&gt;Estou aprendendo a programar!&lt;/p&gt;\n</code></pre> <p>Estou aprendendo a programar!</p> <p>\u00c9 importante saber que estilos inline s\u00e3o uma maneira r\u00e1pida de estilizar diretamente um elemento HTML, mas raramente s\u00e3o usados \u200b\u200bao criar sites. Mas voc\u00ea pode encontrar circunst\u00e2ncias em que o estilo inline \u00e9 necess\u00e1rio, ent\u00e3o entender como ele funciona e reconhec\u00ea-lo no c\u00f3digo HTML \u00e9 um bom conhecimento a se ter. Em breve, voc\u00ea aprender\u00e1 a maneira correta de adicionar c\u00f3digo CSS!</p>"},{"location":"css/sintaxe-base/folha-estilo-externa/","title":"Sintaxe Basica","text":""},{"location":"css/sintaxe-base/folha-estilo-externa/#folha-de-estilo-externa","title":"Folha de Estilo Externa","text":"<p>Os desenvolvedores evitam misturar c\u00f3digos armazenando HTML e CSS em arquivos separados (arquivos HTML cont\u00eam apenas c\u00f3digo HTML, e arquivos CSS cont\u00eam apenas c\u00f3digo CSS).</p> <p>Voc\u00ea pode criar uma folha de estilo externa usando a extens\u00e3o de nome de arquivo <code>.css</code>, assim: <code>style.css</code></p> <p>Com uma folha de estilo externa, voc\u00ea pode escrever todo o c\u00f3digo CSS necess\u00e1rio para estilizar uma p\u00e1gina sem sacrificar a legibilidade e a manutenibilidade do seu arquivo HTML.</p>"},{"location":"css/sintaxe-base/folha-estilo/","title":"Sintaxe Basica","text":""},{"location":"css/sintaxe-base/folha-estilo/#folha-de-estilo","title":"Folha de Estilo","text":"<p>Conforme dito anteriormente, estilos inline n\u00e3o s\u00e3o a melhor maneira de estilizar elementos HTML. Se voc\u00ea quisesse estilizar, por exemplo, v\u00e1rios elementos <code>&lt;h1&gt;</code>, voc\u00ea teria que adicionar estilo inline a cada elemento manualmente. Al\u00e9m disso, voc\u00ea tamb\u00e9m teria que manter o c\u00f3digo HTML quando elementos <code>&lt;h1&gt;</code> adicionais fossem adicionados.</p> <p>Felizmente, o HTML permite que voc\u00ea escreva c\u00f3digo CSS em sua pr\u00f3pria se\u00e7\u00e3o dedicada com um elemento <code>&lt;style&gt;</code> aninhado dentro do elemento <code>&lt;head&gt;</code>. O c\u00f3digo CSS dentro do elemento <code>&lt;style&gt;</code> \u00e9 frequentemente chamado de folha de estilo interna.</p> <p>Uma folha de estilo interna tem certos benef\u00edcios e casos de uso sobre estilos inlines, mas, mais uma vez, n\u00e3o \u00e9 uma pr\u00e1tica recomendada (chegaremos l\u00e1, prometemos). Entender como usar folhas de estilo internas \u00e9, no entanto, um conhecimento \u00fatil a se ter.</p> <p>Para criar uma folha de estilo interna, um elemento <code>&lt;style&gt;</code> deve ser colocado dentro do elemento <code>&lt;head&gt;</code>.</p> <pre><code>&lt;head&gt;\n  &lt;style&gt;\n\n  &lt;/style&gt;\n&lt;/head&gt;\n</code></pre> <p>Ap\u00f3s adicionar tags <code>&lt;style&gt;</code> de abertura e fechamento na se\u00e7\u00e3o head, voc\u00ea pode come\u00e7ar a escrever c\u00f3digo CSS.</p> <pre><code>&lt;head&gt;\n  &lt;style&gt;\n    p {\n      color: red;\n      font-size: 20px;\n    }\n  &lt;/style&gt;\n&lt;/head&gt;\n</code></pre> <p>O c\u00f3digo CSS no exemplo acima altera a cor de todo o texto do par\u00e1grafo para vermelho e tamb\u00e9m altera o tamanho do texto para 20 pixels. Observe como a sintaxe do c\u00f3digo CSS corresponde (na maior parte) \u00e0 sintaxe que voc\u00ea usou para o estilo inline. A principal diferen\u00e7a \u00e9 que voc\u00ea pode especificar quais elementos aplicar o estilo.</p>"},{"location":"css/sintaxe-base/link-estilo/","title":"Sintaxe Basica","text":""},{"location":"css/sintaxe-base/link-estilo/#linkar-estilo","title":"Linkar Estilo","text":"<p>Separamos com sucesso a estrutura (HTML) do estilo (CSS), mas a p\u00e1gina da web ainda parece sem gra\u00e7a. Por qu\u00ea?</p> <p>Quando os c\u00f3digos HTML e CSS est\u00e3o em arquivos separados, os arquivos devem ser vinculados. Caso contr\u00e1rio, o arquivo HTML n\u00e3o conseguir\u00e1 localizar o c\u00f3digo CSS e o estilo n\u00e3o ser\u00e1 aplicado.</p> <p>Voc\u00ea pode usar o elemento <code>&lt;link&gt;</code> para vincular arquivos HTML e CSS. O elemento <code>&lt;link&gt;</code> deve ser colocado dentro do cabe\u00e7alho do arquivo HTML. \u00c9 uma tag de fechamento autom\u00e1tico e requer os seguintes atributos:</p> <p>href \u2014 como o elemento \u00e2ncora, o valor deste atributo deve ser o endere\u00e7o, ou caminho, para o arquivo CSS. rel \u2014 este atributo descreve o relacionamento entre o arquivo HTML e o arquivo CSS. Como voc\u00ea est\u00e1 vinculando a uma folha de estilo, o valor deve ser definido como folha de estilo. Ao vincular um arquivo HTML e um arquivo CSS, o elemento <code>&lt;link&gt;</code> ficar\u00e1 assim:</p> <p><code>&lt;link href='./style.css' rel='stylesheet'&gt;</code></p> <p>Usar um caminho relativo \u00e9 uma maneira muito comum de vincular uma folha de estilo.</p>"},{"location":"html/","title":"HTML","text":""},{"location":"html/#o-que-e","title":"O que \u00e9?","text":"<p>HTML significa linguagem de marca\u00e7\u00e3o de hipertexto:</p> <p>Uma linguagem de marca\u00e7\u00e3o \u00e9 uma linguagem de computador que define a estrutura e a apresenta\u00e7\u00e3o do texto bruto. Em HTML, o computador pode interpretar texto bruto agrupado em elementos HTML. Hipertexto \u00e9 um texto exibido em um computador ou dispositivo que fornece acesso a outro texto por meio de links, tamb\u00e9m conhecidos como hiperlinks.</p>"},{"location":"html/#anatomia","title":"Anatomia","text":"<p>HTML \u00e9 composto de elementos. Esses elementos estruturam a p\u00e1gina web e definem seu conte\u00fado. Vamos dar uma olhada em como eles est\u00e3o escritos.</p> <p>O diagrama \u00e0 seguir exibe um elemento de par\u00e1grafo HTML:</p> <p></p> <p>Como podemos ver, o elemento par\u00e1grafo \u00e9 composto por:</p> <ul> <li>Uma tag de abertura <code>&lt;p&gt;</code></li> <li>O conte\u00fado texto <code>Ol\u00e1, mundo!</code></li> <li>Uma tag de fechamento <code>&lt;/p&gt;</code></li> </ul> <p>Uma tag e o conte\u00fado entre ela s\u00e3o chamados de elemento HTML. Existem muitas tags que podemos usar para organizar e exibir texto e outros tipos de conte\u00fado, como imagens.</p> <p>Vamos revisar rapidamente cada parte do elemento retratado:</p> <p>Elemento HTML (ou simplesmente elemento) \u2014 uma unidade de conte\u00fado em um documento HTML formada por tags HTML e o texto ou m\u00eddia que ele cont\u00e9m.</p> <p>Tag HTML - o nome do elemento, rodeado por um colchete angular de abertura (&lt;) e fechamento (&gt;).</p> <p>Tag de abertura \u2014 a primeira tag HTML usada para iniciar um elemento HTML. O tipo de tag \u00e9 cercado por colchetes angulares de abertura e fechamento.</p> <p>Conte\u00fado \u2014 As informa\u00e7\u00f5es (texto ou outros elementos) contidas entre as tags de abertura e fechamento de um elemento HTML.</p> <p>Tag de fechamento \u2014 a segunda tag HTML usada para finalizar um elemento HTML. Tags de fechamento t\u00eam uma barra (/) dentro delas, logo ap\u00f3s o colchete angular esquerdo.</p>"},{"location":"html/elementos/atributos/","title":"Elementos Iniciais: Body","text":""},{"location":"html/elementos/atributos/#atributos","title":"Atributos","text":"<p>Se quisermos expandir a tag de um elemento, podemos fazer isso usando um atributo. Atributos s\u00e3o conte\u00fados adicionados \u00e0 tag de abertura de um elemento e podem ser usados \u200b\u200bde diversas maneiras, desde fornecer informa\u00e7\u00f5es at\u00e9 alterar o estilo. Os atributos s\u00e3o compostos pelas duas partes a seguir:</p> <ul> <li>O nome do atributo</li> <li>O valor do atributo</li> </ul> <p>Um atributo comumente usado \u00e9 o id. Podemos usar o atributo id para especificar conte\u00fados diferentes (como <code>&lt;div&gt;</code>s) e \u00e9 realmente \u00fatil quando voc\u00ea usa um elemento mais de uma vez. Os ids t\u00eam v\u00e1rios prop\u00f3sitos diferentes em HTML, mas por enquanto, vamos nos concentrar em como eles podem nos ajudar a identificar o conte\u00fado da nossa p\u00e1gina.</p> <p>Quando adicionamos um id a um <code>&lt;div&gt;</code>, colocamos ele na tag de abertura:</p> <pre><code>&lt;div id=\"intro\"&gt;\n  &lt;h1&gt;Introdu\u00e7\u00e3o&lt;/h1&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"html/elementos/body/br/","title":"Elementos Iniciais: Body","text":""},{"location":"html/elementos/body/br/#pular-linha-br","title":"Pular Linha <code>&lt;br&gt;</code>","text":"<p>O espa\u00e7amento entre os c\u00f3digos em um arquivo HTML n\u00e3o afeta o posicionamento dos elementos no navegador. Se estiver interessado em modificar o espa\u00e7amento no navegador, voc\u00ea pode usar o elemento de quebra de linha do HTML: <code>&lt;br&gt;</code>.</p> <p>O elemento de quebra de linha \u00e9 \u00fanico porque \u00e9 composto apenas por uma tag inicial. Voc\u00ea pode us\u00e1-lo em qualquer lugar do seu c\u00f3digo HTML e uma quebra de linha ser\u00e1 mostrada no navegador.</p> <pre><code>&lt;p&gt;\n  O Rio Nilo \u00e9 o maior rio &lt;br&gt; do mundo, medindo mais de 6.850 &lt;br&gt;\n  quil\u00f4metros de extens\u00e3o (aproximadamente 4.260 &lt;br&gt; milhas).\n&lt;/p&gt;\n</code></pre> <p>O c\u00f3digo no exemplo acima resultar\u00e1 em uma sa\u00edda semelhante a esta:</p> <p>O Rio Nilo \u00e9 o maior rio  do mundo, medindo mais de 6.850  quil\u00f4metros de extens\u00e3o (aproximadamente 4.260  milhas).</p>"},{"location":"html/elementos/body/div/","title":"Elementos Iniciais: Body","text":""},{"location":"html/elementos/body/div/#divisao-div","title":"Divis\u00e3o <code>&lt;div&gt;</code>","text":"<p>Um dos elementos mais populares em HTML \u00e9 o elemento <code>&lt;div&gt;</code>. <code>&lt;div&gt;</code> \u00e9 a abrevia\u00e7\u00e3o de \u201cdivis\u00e3o\u201d ou um cont\u00eainer que divide a p\u00e1gina em se\u00e7\u00f5es. Essas se\u00e7\u00f5es s\u00e3o muito \u00fateis para agrupar elementos em seu HTML.</p> <pre><code>&lt;div&gt;\n  &lt;div&gt;\n    &lt;h1&gt;Por que usar divs?&lt;/h1&gt;\n    &lt;p&gt;\u00d3timo para agrupar elementos!&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/body&gt;\n</code></pre> <p><code>&lt;div&gt;</code>s n\u00e3o possuem inerentemente uma representa\u00e7\u00e3o visual, mas s\u00e3o muito \u00fateis quando queremos aplicar estilos personalizados aos nossos elementos HTML. <code>&lt;div&gt;</code>s nos permitem agrupar elementos HTML para aplicar os mesmos estilos a todos os elementos HTML internos. Tamb\u00e9m podemos estilizar o elemento <code>&lt;div&gt;</code> como um todo. Voc\u00ea pode ver como isso pode ser feito no curso Aprenda CSS.</p> <p><code>&lt;div&gt;</code>s podem conter qualquer texto ou outros elementos HTML, como links, imagens ou v\u00eddeos. Lembre-se de sempre adicionar dois espa\u00e7os de recuo ao aninhar elementos dentro de <code>&lt;div&gt;</code>s para melhor legibilidade.</p>"},{"location":"html/elementos/body/estilos-textos/","title":"Elementos Iniciais: Body","text":""},{"location":"html/elementos/body/estilos-textos/#estilizando-textos","title":"Estilizando Textos","text":"<p>Voc\u00ea tamb\u00e9m pode estilizar o texto usando tags HTML. A tag <code>&lt;em&gt;</code> enfatiza o texto, enquanto a tag <code>&lt;strong&gt;</code> destaca o texto importante.</p> <p>Mais tarde, quando come\u00e7ar a estilizar sites, voc\u00ea decidir\u00e1 como deseja que os navegadores exibam o conte\u00fado nas tags <code>&lt;em&gt;</code> e <code>&lt;strong&gt;</code>. Os navegadores, no entanto, possuem folhas de estilo integradas que geralmente estilizam essas tags das seguintes maneiras:</p> <ul> <li>A tag <code>&lt;em&gt;</code> geralmente ser\u00e1 renderizada com \u00eanfase em it\u00e1lico.</li> <li>O <code>&lt;strong&gt;</code> geralmente ser\u00e1 renderizado com \u00eanfase em negrito.   D\u00ea uma olhada em cada estilo em a\u00e7\u00e3o:</li> </ul> <pre><code>&lt;p&gt;\n  &lt;strong&gt;O Rio Nilo&lt;/strong&gt; \u00e9 o &lt;em&gt;maior&lt;/em&gt; rio do mundo, medindo\n  mais de 6.850 quil\u00f4metros de extens\u00e3o (aproximadamente 4.260 milhas).\n&lt;/p&gt;\n</code></pre> <p>Neste exemplo, as tags <code>&lt;strong&gt;</code> e <code>&lt;em&gt;</code> s\u00e3o usadas para enfatizar o texto e produzir o seguinte:</p> <p> O Rio Nilo \u00e9 o maior rio do mundo, medindo mais de 6.850 quil\u00f4metros de extens\u00e3o (aproximadamente 4.260 milhas). </p> <p>Como podemos ver, \u201cO Rio Nilo\u201d est\u00e1 em negrito e \u201cmaior\u201d est\u00e1 em it\u00e1lico.</p>"},{"location":"html/elementos/body/hn/","title":"Elementos Iniciais: Body","text":""},{"location":"html/elementos/body/hn/#titulos-h","title":"T\u00edtulos <code>&lt;h#&gt;</code>","text":"<p>Os t\u00edtulos em HTML s\u00e3o semelhantes aos t\u00edtulos de outros tipos de m\u00eddia. Por exemplo, em jornais, t\u00edtulos grandes s\u00e3o normalmente usados \u200b\u200bpara captar a aten\u00e7\u00e3o do leitor. Outras vezes, os t\u00edtulos s\u00e3o usados \u200b\u200bpara descrever o conte\u00fado, como o t\u00edtulo de um filme ou de um artigo educacional.</p> <p>HTML segue um padr\u00e3o semelhante. Em HTML, existem seis t\u00edtulos ou elementos de t\u00edtulo diferentes. Os t\u00edtulos podem ser usados \u200b\u200bpara diversos fins, como t\u00edtulos de se\u00e7\u00f5es, artigos ou outras formas de conte\u00fado.</p> <p>A seguir est\u00e1 a lista de elementos de t\u00edtulo dispon\u00edveis em HTML. Eles s\u00e3o ordenados do maior para o menor tamanho.</p> <pre><code>&lt;h1&gt;\n&lt;h2&gt;\n&lt;h3&gt;\n&lt;h4&gt;\n&lt;h5&gt;\n&lt;h6&gt;\n</code></pre>"},{"location":"html/elementos/body/img/","title":"Elementos Iniciais: Body","text":""},{"location":"html/elementos/body/img/#imagens-img","title":"Imagens <code>&lt;img&gt;</code>","text":"<p>Todos os elementos que voc\u00ea aprendeu at\u00e9 agora (t\u00edtulos, par\u00e1grafos, listas e trechos) t\u00eam uma coisa em comum: s\u00e3o compostos inteiramente de texto! E se voc\u00ea quiser adicionar conte\u00fado \u00e0 sua p\u00e1gina da web que n\u00e3o seja composto de texto, como imagens?</p> <p>A tag <code>&lt;img&gt;</code> permite adicionar uma imagem a uma p\u00e1gina da web. A maioria dos elementos requer tags de abertura e fechamento, mas a tag <code>&lt;img&gt;</code> \u00e9 uma tag de fechamento autom\u00e1tico. Observe que o final da tag <code>&lt;img&gt;</code> possui uma barra /. Tags de fechamento autom\u00e1tico podem incluir ou omitir a barra final \u2014 ambas ser\u00e3o renderizadas corretamente.</p> <p><code>&lt;img src=\"image-localizacao.jpg\" /&gt;</code></p> <p>A tag <code>&lt;img&gt;</code> possui um atributo obrigat\u00f3rio chamado src. O atributo src deve ser definido como a origem da imagem ou o local da imagem. Nesse caso, o valor de src deve ser o localizador uniforme de recursos (URL) da imagem. Um URL \u00e9 o endere\u00e7o da web ou endere\u00e7o local onde um arquivo est\u00e1 armazenado.</p>"},{"location":"html/elementos/body/img/#imagem-alt","title":"Imagem Alt","text":"<p>Parte de ser um desenvolvedor web excepcional \u00e9 tornar seu site acess\u00edvel a usu\u00e1rios de todas as origens. Para tornar a Web mais inclusiva, precisamos de considerar o que acontece quando tecnologias de apoio, como leitores de ecr\u00e3, se deparam com etiquetas de imagem.</p> <p>O atributo alt, que significa texto alternativo, traz significado \u00e0s imagens de nossos sites. O atributo alt pode ser adicionado \u00e0 tag da imagem assim como o atributo src. O valor de alt deve ser uma descri\u00e7\u00e3o da imagem.</p> <p><code>&lt;img src=\"#\" alt=\"Um campo de girass\u00f3is amarelos\" /&gt;</code></p> <p>O atributo alt tamb\u00e9m serve aos seguintes prop\u00f3sitos:</p> <p>Se uma imagem n\u00e3o for carregada em uma p\u00e1gina da web, o usu\u00e1rio poder\u00e1 passar o mouse sobre a \u00e1rea originalmente destinada \u00e0 imagem e ler uma breve descri\u00e7\u00e3o da imagem. Isso \u00e9 poss\u00edvel pela descri\u00e7\u00e3o que voc\u00ea fornece no atributo alt. Usu\u00e1rios com defici\u00eancia visual geralmente navegam na web com a ajuda de softwares de leitura de tela. Ao incluir o atributo alt, o software de leitura de tela pode ler a descri\u00e7\u00e3o da imagem em voz alta para o usu\u00e1rio com defici\u00eancia visual. O atributo alt tamb\u00e9m desempenha um papel na otimiza\u00e7\u00e3o de mecanismos de pesquisa (SEO), porque os mecanismos de pesquisa n\u00e3o podem \u201cver\u201d as imagens nos sites enquanto rastreiam a Internet. Ter atributos alternativos descritivos pode melhorar a classifica\u00e7\u00e3o do seu site. Se a imagem na p\u00e1gina da web n\u00e3o transmitir qualquer informa\u00e7\u00e3o significativa para um usu\u00e1rio (deficiente visual ou n\u00e3o), o atributo alt deve ser deixado em branco.</p>"},{"location":"html/elementos/body/ol/","title":"Elementos Iniciais: Body","text":""},{"location":"html/elementos/body/ol/#lista-ordenada-ol","title":"Lista Ordenada <code>&lt;ol&gt;</code>","text":"<p>Listas ordenadas <code>&lt;ol&gt;</code> s\u00e3o como listas n\u00e3o ordenadas, exceto que cada item da lista \u00e9 numerado. Eles s\u00e3o \u00fateis quando voc\u00ea precisa listar diferentes etapas de um processo ou classificar os itens do primeiro ao \u00faltimo.</p> <p>Voc\u00ea pode criar a lista ordenada com a tag <code>&lt;ol&gt;</code> e, em seguida, adicionar itens de lista individuais \u00e0 lista usando tags <code>&lt;li&gt;</code>.</p> <pre><code>&lt;ol&gt;\n  &lt;li&gt;Pr\u00e9-aque\u00e7a o forno a 350 graus.&lt;/li&gt;\n  &lt;li&gt;Misture farinha de trigo integral, bicarbonato de s\u00f3dio e sal.&lt;/li&gt;\n  &lt;li&gt;Bata a manteiga e o a\u00e7\u00facar em uma tigela separada.&lt;/li&gt;\n  &lt;li&gt;Adicione os ovos e o extrato de baunilha \u00e0 tigela.&lt;/li&gt;\n&lt;/ol&gt;\n</code></pre> <p>A sa\u00edda ficar\u00e1 assim:</p> <ol> <li>Pr\u00e9-aque\u00e7a o forno a 350 graus.</li> <li>Misture farinha de trigo integral, bicarbonato de s\u00f3dio e sal.</li> <li>Bata a manteiga e o a\u00e7\u00facar em uma tigela separada.</li> <li>Adicione os ovos e o extrato de baunilha \u00e0 tigela.</li> </ol>"},{"location":"html/elementos/body/p-span/","title":"Elementos Iniciais: Body","text":""},{"location":"html/elementos/body/p-span/#textos-p-intervalo-span","title":"Textos <code>&lt;p&gt;</code> / Intervalo <code>&lt;span&gt;</code>","text":"<p>Se quiser exibir texto em HTML, voc\u00ea pode usar um par\u00e1grafo ou intervalo:</p> <p>Par\u00e1grafos <code>&lt;p&gt;</code> cont\u00eam um bloco de texto simples. <code>&lt;span&gt;</code> cont\u00e9m pequenos trechos de texto ou outro HTML. Eles s\u00e3o usados \u200b\u200bpara separar pequenos peda\u00e7os de conte\u00fado que est\u00e3o na mesma linha de outro conte\u00fado. D\u00ea uma olhada em cada um desses elementos em a\u00e7\u00e3o abaixo:</p> <pre><code>&lt;div&gt;\n  &lt;h1&gt;Tecnologia&lt;/h1&gt;\n&lt;/div&gt;\n&lt;div&gt;\n  Prev\u00ea-se que &lt;p&gt;&lt;span&gt;carros aut\u00f4nomos&lt;/span&gt; substituam at\u00e9 2 milh\u00f5es\n  de empregos nas pr\u00f3ximas duas d\u00e9cadas.&lt;/p&gt;\n&lt;/div&gt;\n</code></pre> <p>No exemplo acima, existem dois <code>&lt;div&gt;</code> diferentes. O segundo <code>&lt;div&gt;</code> cont\u00e9m um <code>&lt;p&gt;</code> com <code>&lt;span&gt;</code>Carros aut\u00f4nomos<code>&lt;/span&gt;</code>. Este elemento <code>&lt;span&gt;</code> separa \u201cCarros aut\u00f4nomos\u201d do restante do texto do par\u00e1grafo.</p> <p>\u00c9 melhor usar um elemento <code>&lt;span&gt;</code> quando voc\u00ea deseja direcionar um conte\u00fado espec\u00edfico que est\u00e1 embutido ou na mesma linha de outro texto. Se voc\u00ea quiser dividir seu conte\u00fado em blocos, \u00e9 melhor usar um <code>&lt;div&gt;</code>.</p>"},{"location":"html/elementos/body/ul/","title":"Elementos Iniciais: Body","text":""},{"location":"html/elementos/body/ul/#lista-nao-ordenada-ul","title":"Lista N\u00e3o Ordenada <code>&lt;ul&gt;</code>","text":"<p>Al\u00e9m de organizar o texto em forma de par\u00e1grafo, voc\u00ea tamb\u00e9m pode exibir o conte\u00fado em uma lista de f\u00e1cil leitura.</p> <p>Em HTML, voc\u00ea pode usar uma tag de lista n\u00e3o ordenada <code>&lt;ul&gt;</code> para criar uma lista de itens sem nenhuma ordem espec\u00edfica. Uma lista n\u00e3o ordenada descreve itens individuais da lista com um marcador.</p> <p>O elemento <code>&lt;ul&gt;</code> n\u00e3o deve conter texto bruto e n\u00e3o formatar\u00e1 automaticamente o texto bruto em uma lista n\u00e3o ordenada de itens. Itens individuais da lista devem ser adicionados \u00e0 lista n\u00e3o ordenada usando a tag <code>&lt;li&gt;</code>. A tag <code>&lt;li&gt;</code> ou item de lista \u00e9 usada para descrever um item em uma lista.</p> <pre><code>&lt;ul&gt;\n  &lt;li&gt;Limas&lt;/li&gt;\n  &lt;li&gt;Tortilhas&lt;/li&gt;\n  &lt;li&gt;Frango&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre> <p>No exemplo acima, a lista foi criada usando a tag <code>&lt;ul&gt;</code> e todos os itens individuais da lista foram adicionados usando as tags <code>&lt;li&gt;</code>.</p> <p>A sa\u00edda ficar\u00e1 assim:</p> <ul> <li>Limas</li> <li>Tortilhas</li> <li>Frango</li> </ul>"},{"location":"html/elementos/body/video/","title":"Elementos Iniciais: Body","text":""},{"location":"html/elementos/body/video/#videos-video","title":"Videos <code>&lt;video&gt;</code>","text":"<p>Al\u00e9m de imagens, o HTML tamb\u00e9m oferece suporte \u00e0 exibi\u00e7\u00e3o de v\u00eddeos. Assim como o elemento <code>&lt;img&gt;</code>, o elemento <code>&lt;video&gt;</code> requer um atributo src com um link para a fonte do v\u00eddeo. Ao contr\u00e1rio do elemento <code>&lt;img&gt;</code>, entretanto, o elemento <code>&lt;video&gt;</code> requer uma tag de abertura e uma tag de fechamento.</p> <pre><code>&lt;video src=\"myVideo.mp4\" width=\"320\" height=\"240\" controles&gt;\n  V\u00eddeo n\u00e3o suportado\n&lt;/v\u00eddeo&gt;\n</code></pre> <p>Neste exemplo, a fonte de v\u00eddeo (src) \u00e9 \u201cmyVideo.mp4\u201d. A fonte pode ser um arquivo de v\u00eddeo hospedado junto com sua p\u00e1gina da web ou um URL que aponta para um arquivo de v\u00eddeo hospedado em outra p\u00e1gina da web.</p> <p>Ap\u00f3s o atributo src, os atributos width e height s\u00e3o usados \u200b\u200bpara definir o tamanho do v\u00eddeo exibido no navegador. O atributo de controles instrui o navegador a incluir controles b\u00e1sicos de v\u00eddeo, como pausar e reproduzir.</p> <p>O texto V\u00eddeo n\u00e3o suportado entre as tags de abertura e fechamento do v\u00eddeo s\u00f3 ser\u00e1 exibido se o navegador n\u00e3o conseguir carregar o v\u00eddeo.</p>"},{"location":"html/elementos/body/a/item-pagina/","title":"Elementos Iniciais: Body","text":""},{"location":"html/elementos/body/a/item-pagina/#link-para-item-da-pagina","title":"Link para item da p\u00e1gina","text":"<p>Neste ponto, temos todo o conte\u00fado que queremos em nossa p\u00e1gina. Como temos tanto conte\u00fado, nem tudo cabe na tela. Como tornamos mais f\u00e1cil para um usu\u00e1rio ir para diferentes partes de nossa p\u00e1gina?</p> <p>Quando os usu\u00e1rios visitam nosso site, queremos que eles possam clicar em um link e fazer com que a p\u00e1gina role automaticamente para uma se\u00e7\u00e3o espec\u00edfica.</p> <p>Para vincular a um alvo na mesma p\u00e1gina, devemos dar um ID ao alvo, como este:</p> <pre><code>&lt;p id=\"top\"&gt;Este \u00e9 o topo da p\u00e1gina!&lt;/p&gt;\n&lt;h1 id=\"bottom\"&gt;Este \u00e9 o fundo! &lt;/h1&gt;\n</code></pre> <p>Neste exemplo, o elemento <code>&lt;p&gt;</code> recebe um id <code>top</code> e o elemento <code>&lt;h1&gt;</code> recebe <code>bottom</code>. Um ID pode ser adicionado \u00e0 maioria dos elementos de uma p\u00e1gina da web.</p> <p>Um id deve ser descritivo para facilitar a lembran\u00e7a da finalidade de um link. O link de destino \u00e9 uma string contendo o caractere # e o id do elemento de destino.</p> <pre><code>&lt;ol&gt;\n &lt;li&gt;&lt;a href=\"#top\"&gt;Principal&lt;/a&gt;&lt;/li&gt;\n &lt;li&gt;&lt;a href=\"#bottom\"&gt;Inferior&lt;/a&gt;&lt;/li&gt;\n&lt;/ol&gt;\n</code></pre> <p>No exemplo acima, os links para <code>&lt;p id=\"top\"&gt;</code> e <code>&lt;h1 id=\"bottom\"&gt;</code> est\u00e3o incorporados em uma lista ordenada. Esses links aparecem no navegador como uma lista numerada de links. Um id \u00e9 especialmente \u00fatil para organizar conte\u00fado pertencente a um div!</p>"},{"location":"html/elementos/body/a/outra-pagina/","title":"Elementos Iniciais: Body","text":""},{"location":"html/elementos/body/a/outra-pagina/#link-para-outra-pagina-a","title":"Link para outra p\u00e1gina <code>&lt;a&gt;</code>","text":"<p>Um dos aspectos poderosos do HTML (e da Internet) \u00e9 a capacidade de vincular a outras p\u00e1ginas da web.</p> <p>Voc\u00ea pode adicionar links a uma p\u00e1gina da web adicionando um elemento \u00e2ncora <code>&lt;a&gt;</code> e incluindo o texto do link entre as tags de abertura e fechamento.</p> <p><code>&lt;a&gt;Este \u00e9 um link para a Wikip\u00e9dia&lt;/a&gt;</code></p> <p>Espere um minuto! Tecnicamente, o link do exemplo acima est\u00e1 incompleto. Como exatamente o link acima deve funcionar se n\u00e3o houver um URL que leve os usu\u00e1rios \u00e0 p\u00e1gina real da Wikipedia?</p> <p>O elemento \u00e2ncora no exemplo acima est\u00e1 incompleto sem o atributo href. Este atributo significa refer\u00eancia de hipertexto e \u00e9 usado para vincular a um caminho ou endere\u00e7o onde um arquivo est\u00e1 localizado (seja no seu computador ou em outro local). Os caminhos fornecidos para o atributo href geralmente s\u00e3o URLs.</p> <p><code>&lt;a href=\"https://www.wikipedia.org/\"&gt;Este \u00e9 um link para a Wikip\u00e9dia&lt;/a&gt;</code></p> <p>No exemplo acima, o atributo href foi definido como o valor da URL https://www.wikipedia.org/. O exemplo agora mostra o uso correto de um elemento \u00e2ncora.</p> <p>Ao ler a documenta\u00e7\u00e3o t\u00e9cnica, voc\u00ea pode encontrar o termo hiperlink. N\u00e3o se preocupe, este \u00e9 simplesmente o termo t\u00e9cnico para link. Esses termos s\u00e3o frequentemente usados \u200b\u200bde forma intercambi\u00e1vel.</p>"},{"location":"html/elementos/body/a/outra-pagina/#abrir-link-em-outra-aba","title":"Abrir link em outra aba","text":"<p>Voc\u00ea j\u00e1 clicou em um link e observou a p\u00e1gina da web resultante aberta em uma nova janela do navegador? Nesse caso, voc\u00ea pode agradecer ao atributo <code>target</code> do elemento <code>&lt;a&gt;</code>.</p> <p>O atributo <code>target</code> especifica como um link deve ser aberto.</p> <p>\u00c9 poss\u00edvel que um ou mais links em sua p\u00e1gina da web direcionem para um site totalmente diferente. Nesse caso, voc\u00ea pode querer que os usu\u00e1rios leiam o site vinculado, mas espere que eles retornem \u00e0 sua p\u00e1gina da web. \u00c9 exatamente nesse momento que o atributo <code>target</code> \u00e9 \u00fatil!</p> <p>Para que um link seja aberto em uma nova janela, o atributo <code>target</code> requer um valor <code>_blank</code>. O atributo <code>target</code> pode ser adicionado diretamente \u00e0 tag de abertura do elemento \u00e2ncora, assim como o atributo <code>href</code>.</p> <p><code>&lt;a href=\"https://en.wikipedia.org/wiki/Brown_bear\" target=\"_blank\"&gt;O urso pardo&lt;/a&gt;</code></p> <p>No exemplo acima, definir o atributo target como <code>_blank</code> instrui o navegador a abrir a p\u00e1gina relevante da Wikipedia em uma nova janela.</p>"},{"location":"html/elementos/body/a/outros-elementos/","title":"Elementos Iniciais: Body","text":""},{"location":"html/elementos/body/a/outros-elementos/#link-em-outros-elementos","title":"Link em outros elementos","text":"<p>Voc\u00ea provavelmente j\u00e1 visitou sites onde nem todos os links eram compostos de texto. Talvez os links em que voc\u00ea clicou fossem imagens ou alguma outra forma de conte\u00fado.</p> <p>At\u00e9 agora, adicionamos links compostos apenas de texto, como o seguinte:</p> <p><code>&lt;a href=\"https://en.wikipedia.org/wiki/Opuntia\" target=\"_blank\"&gt;Espinhoso&lt;/a&gt;</code></p> <p>Links somente de texto, entretanto, diminuiriam significativamente sua flexibilidade como desenvolvedor web!</p> <p>Felizmente, o HTML permite transformar praticamente qualquer elemento em um link, envolvendo esse elemento com um elemento \u00e2ncora. Com esta t\u00e9cnica, \u00e9 poss\u00edvel transformar imagens em links simplesmente envolvendo o elemento <code>&lt;img&gt;</code> com um elemento <code>&lt;a&gt;</code>.</p> <p><code>&lt;a href=\"https://en.wikipedia.org/wiki/Opuntia\" target=\"_blank\"&gt;&lt;img src=\"https://www.Prickly_Pear_Closeup.jpg\" alt=\"Uma fruta vermelha de pera espinhosa\"/&gt; &lt;/a&gt;</code></p> <p>No exemplo acima, a imagem de uma pera espinhosa foi transformada em um link envolvendo a parte externa do elemento <code>&lt;img&gt;</code> com um elemento <code>&lt;a&gt;</code>.</p>"},{"location":"html/elementos/body/a/pagina-relativa/","title":"Elementos Iniciais: Body","text":""},{"location":"html/elementos/body/a/pagina-relativa/#link-para-pagina-relativa","title":"Link para p\u00e1gina relativa","text":"<p>At\u00e9 agora voc\u00ea aprendeu como criar links para p\u00e1ginas da web externas. Muitos sites tamb\u00e9m possuem links para p\u00e1ginas internas da web, como Home, About e Contact.</p> <p>Antes de aprendermos como vincular p\u00e1ginas internas, vamos estabelecer onde nossos arquivos est\u00e3o armazenados. Ao criar sites est\u00e1ticos de v\u00e1rias p\u00e1ginas, os desenvolvedores da web geralmente armazenam arquivos HTML no diret\u00f3rio raiz ou em uma pasta principal onde todos os arquivos do projeto s\u00e3o armazenados. \u00c0 medida que o tamanho dos projetos criados aumenta, voc\u00ea pode usar pastas adicionais dentro da pasta principal do projeto para organizar seu c\u00f3digo.</p> <pre><code>pasta de projeto/\n|\u2014\u2014 sobre.html\n|\u2014\u2014 contato.html\n|\u2014\u2014 \u00edndice.html\n</code></pre> <p>O exemplo acima mostra tr\u00eas arquivos diferentes \u2013 about.html, contact.html e index.html em uma pasta.</p> <p>Os arquivos HTML geralmente s\u00e3o armazenados na mesma pasta, conforme mostrado no exemplo acima. Se o navegador estiver exibindo index.html, ele tamb\u00e9m saber\u00e1 que about.html e contact.html est\u00e3o na mesma pasta. Como os arquivos s\u00e3o armazenados na mesma pasta, podemos vincular p\u00e1ginas da web usando um caminho relativo.</p> <p><code>&lt;a href=\"./contact.html\"&gt;Contato&lt;/a&gt;</code></p> <p>Neste exemplo, a tag <code>&lt;a&gt;</code> \u00e9 usada com um caminho relativo para vincular o arquivo HTML atual ao arquivo contact.html na mesma pasta. Na p\u00e1gina da web, Contato aparecer\u00e1 como um link.</p> <p>Um caminho relativo \u00e9 um nome de arquivo que mostra o caminho para um arquivo local (um arquivo no mesmo site, como <code>./index.html</code>) versus um caminho absoluto (um URL completo, como <code>https://www.google.com/search/howto-html</code> que est\u00e1 armazenado em uma pasta diferente). O <code>./</code> em <code>./index.html</code> diz ao navegador para procurar o arquivo na pasta atual.</p>"},{"location":"html/elementos/body/form/input/","title":"Input","text":""},{"location":"html/elementos/body/form/input/#elementos-avancados-body","title":"Elementos Avan\u00e7ados: Body","text":""},{"location":"html/elementos/body/form/input/#input-base","title":"Input Base","text":"<p>Se quisermos criar um campo de entrada em nosso <code>&lt;form&gt;</code>, precisaremos da ajuda do elemento <code>&lt;input&gt;</code>.</p> <p>O elemento <code>&lt;input&gt;</code> possui um atributo type que determina como ele \u00e9 renderizado na p\u00e1gina da web e que tipo de dados ele pode aceitar.</p> <p>O primeiro valor para o atributo type que iremos explorar \u00e9 <code>text</code>. Quando criamos um elemento <code>&lt;input&gt;</code> com <code>type=\"text\"</code>, ele renderiza um campo de texto no qual os usu\u00e1rios podem digitar. Observe que o valor padr\u00e3o do tipo \u00e9 <code>text</code>. Tamb\u00e9m \u00e9 importante incluir um atributo name para <code>&lt;input&gt;</code> \u2014 sem o atributo name, as informa\u00e7\u00f5es em <code>&lt;input&gt;</code> n\u00e3o ser\u00e3o enviadas quando o <code>&lt;form&gt;</code> for enviado. Explicaremos mais sobre envios e o bot\u00e3o enviar em um exerc\u00edcio posterior. Por enquanto, vamos examinar o seguinte c\u00f3digo que produz um campo de entrada de texto:</p> <pre><code>&lt;form action=\"/example.html\" method=\"POST\"&gt;\n  &lt;input type=\"text\" name=\"first-text-field\"&gt;\n&lt;/form&gt;\n</code></pre> <p>Aqui est\u00e1 uma captura de tela da apar\u00eancia do formul\u00e1rio renderizado em uma p\u00e1gina da web para o navegador Chrome (navegadores diferentes t\u00eam renderiza\u00e7\u00e3o padr\u00e3o diferente). Quando carregado inicialmente, ser\u00e1 uma caixa vazia:</p> <p>campo de texto vazio renderizado do elemento de entrada <code>type='text'</code> Depois que os usu\u00e1rios digitam no elemento <code>&lt;input&gt;</code>, o valor do atributo value se torna o que \u00e9 digitado no campo de texto. O valor do atributo value \u00e9 emparelhado com o valor do atributo name e enviado como texto quando o formul\u00e1rio \u00e9 enviado. Por exemplo, se um usu\u00e1rio digitou \u201cdetalhes importantes\u201d no campo de texto criado pelo nosso elemento <code>&lt;input&gt;</code>:</p> <p>campo de texto preenchido renderizado que diz 'detalhes importantes' Quando o formul\u00e1rio \u00e9 enviado, o texto: <code>first-text-field=detalhes importantes</code> \u00e9 enviado para <code>/example.html</code> porque o valor do atributo name \u00e9 <code>first-text-field</code> e o valor do valor \u00e9 \"detalhes importantes\".</p> <p>Tamb\u00e9m poder\u00edamos atribuir um valor padr\u00e3o para o atributo value para que os usu\u00e1rios tenham um campo de texto preenchido quando virem o formul\u00e1rio renderizado pela primeira vez, assim:</p> <pre><code>&lt;form action=\"/example.html\" method=\"POST\"&gt;\n  &lt;input type=\"text\" name=\"first-text-field\" value=\"j\u00e1 preenchido\"&gt;\n&lt;/form&gt;\n</code></pre> <p>\u00c9 renderizado caixa de texto preenchida devido ao atributo <code>value</code> atribu\u00eddo:</p>"},{"location":"html/elementos/body/form/input/#label","title":"Label","text":"<p>O elemento <code>&lt;label&gt;</code> possui uma tag de abertura e fechamento e exibe o texto que est\u00e1 escrito entre as tags de abertura e fechamento. Para associar um <code>&lt;label&gt;</code> e um <code>&lt;input&gt;</code>, o <code>&lt;input&gt;</code> precisa de um atributo id. Em seguida, atribu\u00edmos o atributo for do elemento <code>&lt;label&gt;</code> com o valor do atributo id de <code>&lt;input&gt;</code>, assim:</p> <pre><code>&lt;form&gt;\n  &lt;label for=\"refeicao\"&gt;O que voc\u00ea quer comer?&lt;/label&gt;\n  &lt;br&gt;\n  &lt;input type=\"text\" name=\"comida\" id=\"refeicao\"&gt;\n&lt;/form&gt;\n</code></pre> O que voc\u00ea quer comer? <p>O formul\u00e1rio renderizado com campo de texto rotulado.</p> <p>Agora os usu\u00e1rios sabem para que serve o elemento <code>&lt;input&gt;</code>! Outro benef\u00edcio de usar o elemento <code>&lt;label&gt;</code> \u00e9 que quando este elemento \u00e9 clicado, o <code>&lt;input&gt;</code> correspondente \u00e9 destacado/selecionado.</p>"},{"location":"html/elementos/body/form/input/#input-tipo-senha","title":"Input Tipo Senha","text":"<p>Pense em todas as vezes que tivemos que colocar informa\u00e7\u00f5es confidenciais, como uma senha ou PIN, em um <code>&lt;form&gt;</code>. N\u00e3o queremos que nossas informa\u00e7\u00f5es sejam vistas por ningu\u00e9m que esteja espiando por cima do nosso ombro! Felizmente, temos o atributo <code>type=\"password\"</code> para <code>&lt;input&gt;</code>!</p> <p>Um elemento <code>&lt;input type =\"password\"&gt;</code> substituir\u00e1 o texto de entrada por outro caractere como um asterisco (*) ou um ponto (\u2022). O c\u00f3digo abaixo fornece um exemplo de como criar um campo de senha:</p> <pre><code>&lt;form&gt;\n  &lt;label for=\"senha-usuario\"&gt;Senha: &lt;/label&gt;\n  &lt;input type=\"password\" id=\"senha-usuario\" name=\"senha-usuario\"&gt;\n&lt;/form&gt;\n</code></pre> Senha:  <p>Mesmo que o campo de senha oculte o texto da senha, quando o formul\u00e1rio \u00e9 enviado, o valor do texto \u00e9 enviado. Ou seja, se for digitado <code>senha123</code> no campo de senha, <code>senha-usuario=senha123</code> ser\u00e1 enviado junto com as demais informa\u00e7\u00f5es do formul\u00e1rio.</p>"},{"location":"html/elementos/body/form/input/#input-tipo-numero","title":"Input Tipo N\u00famero","text":"<p>Agora examinamos dois atributos de tipo para <code>&lt;input&gt;</code> relacionados ao texto. Mas, podemos querer que nossos usu\u00e1rios digitem um n\u00famero \u2014 nesse caso, podemos definir o atributo type como number!</p> <p>Ao definir <code>type=\"number\"</code> para um <code>&lt;input&gt;</code> podemos restringir o que os usu\u00e1rios digitam no campo de entrada apenas para n\u00fameros (e alguns caracteres especiais como -, + e .). Tamb\u00e9m podemos fornecer um atributo step que cria setas dentro do campo de entrada para aumentar ou diminuir o valor do atributo step. Abaixo est\u00e1 o c\u00f3digo necess\u00e1rio para renderizar um campo de entrada para n\u00fameros:</p> <pre><code>&lt;form&gt;\n  &lt;label for=\"anos\"&gt; Idade: &lt;/label&gt;\n  &lt;input id=\"anos\" name=\"anos\" type=\"number\" step=\"1\"&gt;\n&lt;/form&gt;\n</code></pre>  Idade:  <p>O campo de entrada de n\u00famero renderizado com setas no lado direito do campo.</p>"},{"location":"html/elementos/body/form/input/#input-tipo-intervalo","title":"Input Tipo Intervalo","text":"<p>Usar um <code>&lt;input type=\"number\"&gt;</code> \u00e9 \u00f3timo se quisermos permitir que os usu\u00e1rios digitem qualquer n\u00famero de sua escolha. Mas, se quis\u00e9ssemos limitar quais n\u00fameros nossos usu\u00e1rios poderiam digitar, poder\u00edamos considerar o uso de um valor de tipo diferente. Outra op\u00e7\u00e3o que poder\u00edamos usar \u00e9 definir o tipo como <code>range</code>, o que cria um controle deslizante.</p> <p>Para definir os valores m\u00ednimo e m\u00e1ximo do controle deslizante, atribu\u00edmos valores aos atributos min e max do <code>&lt;input&gt;</code>. Tamb\u00e9m poder\u00edamos controlar o qu\u00e3o suave e fluido o controle deslizante funciona, atribuindo um valor ao atributo step. Valores de passos menores far\u00e3o com que o controle deslizante se mova com mais fluidez, enquanto valores de passos maiores far\u00e3o com que o controle deslizante se mova de maneira mais percept\u00edvel. D\u00ea uma olhada no c\u00f3digo para criar um controle deslizante:</p> <pre><code>&lt;form&gt;\n  &lt;label for=\"volume\"&gt; Controle de volume&lt;/label&gt;\n  &lt;input id=\"volume\" name=\"volume\" type=\"range\" min=\"0\" max=\"100\" step=\"1\"&gt;\n&lt;/form&gt;\n</code></pre> Controle de volume: <p>No exemplo acima, cada vez que o controle deslizante se move um, o valor do atributo de valor de <code>&lt;input&gt;</code> muda.</p>"},{"location":"html/elementos/body/form/input/#input-tipo-caixa-multi-selecao","title":"Input Tipo Caixa Multi Sele\u00e7\u00e3o","text":"<p>At\u00e9 agora, os tipos de entradas que permitimos eram todas escolhas \u00fanicas. Mas, e se apresent\u00e1ssemos m\u00faltiplas op\u00e7\u00f5es aos usu\u00e1rios e permit\u00edssemos que eles selecionassem qualquer n\u00famero de op\u00e7\u00f5es? Parece que poder\u00edamos usar caixas de sele\u00e7\u00e3o! Em um <code>&lt;form&gt;</code> usar\u00edamos o elemento <code>&lt;input&gt;</code> e definir\u00edamos type=\"checkbox\". Examine o c\u00f3digo usado para criar v\u00e1rias caixas de sele\u00e7\u00e3o:</p> <pre><code>&lt;form&gt;\n  &lt;p&gt;Escolha o recheio da sua pizza:&lt;/p&gt;\n  &lt;label for=\"cheese\"&gt;Queijo extra&lt;/label&gt;\n  &lt;input id=\"queijo\" name=\"topping\" type=\"checkbox\" value=\"queijo\"&gt;\n  &lt;br&gt;\n  &lt;label for=\"calabresa\"&gt;Calabresa&lt;/label&gt;\n  &lt;input id=\"calabresa\" name=\"topping\" type=\"checkbox\" value=\"calabresa\"&gt;\n  &lt;br&gt;\n  &lt;label for=\"presunto\"&gt;Presunto&lt;/label&gt;\n  &lt;input id=\"presunto\" name=\"topping\" type=\"checkbox\" value=\"presunto\"&gt;\n&lt;/form&gt;\n</code></pre> <p>Escolha o recheio da sua pizza:</p> Queijo Calabresa Presunto <p>Existem valores atribu\u00eddos ao atributo de valor das caixas de sele\u00e7\u00e3o.</p> <p>Esses valores n\u00e3o s\u00e3o vis\u00edveis no pr\u00f3prio formul\u00e1rio, por isso \u00e9 importante utilizarmos um <code>&lt;label&gt;</code> associado para identificar o checkbox. cada <code>&lt;input&gt;</code> tem o mesmo valor para o atributo name. Usar o mesmo nome para cada caixa de sele\u00e7\u00e3o agrupa os <code>&lt;input&gt;s</code>. No entanto, cada <code>&lt;input&gt;</code> possui um ID exclusivo para emparelhar com um <code>&lt;label&gt;</code>.</p>"},{"location":"html/elementos/body/form/input/#input-tipo-caixa-unica-selecao","title":"Input Tipo Caixa \u00danica Sele\u00e7\u00e3o","text":"<p>As caixas de sele\u00e7\u00e3o funcionam bem se quisermos apresentar aos usu\u00e1rios m\u00faltiplas op\u00e7\u00f5es e deix\u00e1-los escolher uma ou mais op\u00e7\u00f5es. No entanto, h\u00e1 casos em que queremos apresentar m\u00faltiplas op\u00e7\u00f5es e permitir apenas uma sele\u00e7\u00e3o \u2014 como perguntar aos usu\u00e1rios se eles concordam ou discordam dos termos e condi\u00e7\u00f5es. Vejamos o c\u00f3digo usado para criar bot\u00f5es de op\u00e7\u00e3o:</p> <pre><code>&lt;form&gt;\n  &lt;p&gt;Qual \u200b\u200b\u00e9 a soma de 1 + 1?&lt;/p&gt;\n  &lt;input type=\"radio\" id=\"dois\" name=\"resposta\" valor=\"2\"&gt;\n  &lt;label for=\"dois\"&gt;2&lt;/label&gt;\n  &lt;br&gt;\n  &lt;input type=\"radio\" id=\"eleven\" name=\"resposta\" value=\"11\"&gt;\n  &lt;label for=\"onze\"&gt;11&lt;/label&gt;\n&lt;/form&gt;\n</code></pre> <p>Qual \u200b\u200b\u00e9 a soma de 1 + 1?</p> 2 11 <p>O formul\u00e1rio renderizado contendo bot\u00f5es de op\u00e7\u00e3o.</p> <p>Observe no trecho de c\u00f3digo que os bot\u00f5es de op\u00e7\u00e3o (como caixas de sele\u00e7\u00e3o) n\u00e3o exibem seu valor. Temos um <code>&lt;label&gt;</code> associado para representar o valor do bot\u00e3o de op\u00e7\u00e3o. Para agrupar bot\u00f5es de op\u00e7\u00e3o, atribu\u00edmos a eles o mesmo nome e apenas um bot\u00e3o de op\u00e7\u00e3o desse grupo pode ser selecionado.</p>"},{"location":"html/elementos/body/form/intro/","title":"Elementos Avan\u00e7ados: Body","text":""},{"location":"html/elementos/body/form/intro/#formulario-form","title":"Formul\u00e1rio <code>&lt;form&gt;</code>","text":"<p>Podemos pensar na internet como uma rede de computadores que enviam e recebem informa\u00e7\u00f5es. Os computadores precisam de uma solicita\u00e7\u00e3o HTTP para saber como se comunicar. A solicita\u00e7\u00e3o HTTP instrui o computador receptor sobre como lidar com as informa\u00e7\u00f5es recebidas. Mais informa\u00e7\u00f5es podem ser encontradas em nosso artigo sobre solicita\u00e7\u00f5es HTTP.</p> <p>O elemento <code>&lt;form&gt;</code> \u00e9 uma \u00f3tima ferramenta para coletar informa\u00e7\u00f5es, mas ent\u00e3o precisamos enviar essas informa\u00e7\u00f5es para outro lugar para processamento. Precisamos fornecer ao elemento <code>&lt;form&gt;</code> o local para onde v\u00e3o as informa\u00e7\u00f5es do <code>&lt;form&gt;</code> e qual solicita\u00e7\u00e3o HTTP fazer. D\u00ea uma olhada no exemplo <code>&lt;form&gt;</code> abaixo:</p> <pre><code>&lt;form action=\"/example.html\" m\u00e9todo=\"POST\"&gt;\n&lt;/form&gt;\n</code></pre> <p>No exemplo acima, criamos o esqueleto de um <code>&lt;form&gt;</code> que enviar\u00e1 informa\u00e7\u00f5es para example.html como uma solicita\u00e7\u00e3o POST:</p> <p>O atributo action determina para onde as informa\u00e7\u00f5es s\u00e3o enviadas. O atributo method recebe um verbo HTTP que est\u00e1 inclu\u00eddo na solicita\u00e7\u00e3o HTTP. Observa\u00e7\u00e3o: verbos HTTP como POST n\u00e3o precisam estar em letras mai\u00fasculas para que a solicita\u00e7\u00e3o funcione, mas isso \u00e9 feito fora da conven\u00e7\u00e3o. No exemplo acima poder\u00edamos ter escrito method=\"post\" e ainda funcionaria.</p> <p>O elemento <code>&lt;form&gt;</code> tamb\u00e9m pode conter elementos filhos. Por exemplo, seria \u00fatil fornecer um cabe\u00e7alho para que os usu\u00e1rios saibam do que se trata este <code>&lt;form&gt;</code>. Tamb\u00e9m poder\u00edamos adicionar um par\u00e1grafo para fornecer ainda mais detalhes. Vamos ver um exemplo disso no c\u00f3digo:</p> <pre><code>&lt;form action=\"/example.html\" m\u00e9todo=\"POST\"&gt;\n  &lt;h1&gt;Criando um formul\u00e1rio&lt;/h1&gt;\n  &lt;p&gt;Parece que voc\u00ea quer aprender como criar um formul\u00e1rio HTML. Bem, a melhor maneira de aprender \u00e9 brincar com isso.&lt;/p&gt;\n&lt;/form&gt;\n</code></pre> <p>O exemplo acima n\u00e3o coleta nenhuma entrada do usu\u00e1rio, mas faremos isso no pr\u00f3ximo exerc\u00edcio. Por enquanto, vamos praticar a cria\u00e7\u00e3o da base de um <code>&lt;form&gt;</code> HTML!</p>"},{"location":"html/elementos/body/form/select/","title":"Elementos Avan\u00e7ados: Body","text":""},{"location":"html/elementos/body/form/select/#lista-suspensa-base","title":"Lista Suspensa Base","text":"<p>Os bot\u00f5es de op\u00e7\u00e3o s\u00e3o \u00f3timos se quisermos que nossos usu\u00e1rios escolham uma op\u00e7\u00e3o entre algumas op\u00e7\u00f5es vis\u00edveis, mas imagine se tiv\u00e9ssemos uma lista completa de op\u00e7\u00f5es! Essa situa\u00e7\u00e3o pode levar rapidamente a muitos bot\u00f5es de op\u00e7\u00e3o para monitorar.</p> <p>Uma solu\u00e7\u00e3o alternativa \u00e9 usar uma lista suspensa para permitir que nossos usu\u00e1rios escolham uma op\u00e7\u00e3o em uma lista organizada. Aqui est\u00e1 o c\u00f3digo para criar um menu suspenso:</p> <pre><code>&lt;form&gt;\n  &lt;label for=\"almoco\"&gt;O que tem para o almo\u00e7o?&lt;/label&gt;\n  &lt;select id=\"almoco\" name=\"almo\u00e7o\"&gt;\n    &lt;option value=\"pizza\"&gt;Pizza&lt;/option&gt;\n    &lt;option value=\"macarrao\"&gt;Macarrao&lt;/option&gt;\n    &lt;option value=\"salada\"&gt;Salada&lt;/option&gt;\n    &lt;option value=\"ramen\"&gt;Ramen&lt;/option&gt;\n    &lt;option value=\"tacos\"&gt;Tacos&lt;/option&gt;\n  &lt;/select&gt;\n&lt;/form&gt;\n</code></pre> O que tem para o almo\u00e7o? Pizza Macarrao Salada Ramen Tacos <p>Observe no c\u00f3digo que estamos usando o elemento <code>&lt;select&gt;</code> para criar a lista suspensa. Para preencher a lista suspensa, adicionamos v\u00e1rios elementos <code>&lt;option&gt;</code>, cada um com um atributo de valor. Por padr\u00e3o, apenas uma dessas op\u00e7\u00f5es pode ser selecionada.</p> <p>O texto renderizado \u00e9 o texto inclu\u00eddo entre as tags <code>&lt;option&gt;</code> de abertura e fechamento. Por\u00e9m, \u00e9 o valor do atributo value que \u00e9 usado no envio do <code>&lt;form&gt;</code> (observe a diferen\u00e7a no texto e na capitaliza\u00e7\u00e3o do valor). Quando o <code>&lt;form&gt;</code> for enviado, as informa\u00e7\u00f5es deste campo de entrada ser\u00e3o enviadas utilizando o nome do <code>&lt;select&gt;</code> e o valor da <code>&lt;option&gt;</code> escolhida. Por exemplo, se um usu\u00e1rio selecionasse Pizza na lista suspensa, a informa\u00e7\u00e3o seria enviada como <code>almoco=pizza</code>.</p>"},{"location":"html/elementos/body/form/select/#lista-suspensa-auto-completar","title":"Lista Suspensa Auto Completar","text":"<p>Mesmo se tivermos uma lista suspensa organizada, se a lista tiver muitas op\u00e7\u00f5es, pode ser entediante para os usu\u00e1rios percorrerem a lista inteira para localizar uma op\u00e7\u00e3o. \u00c9 a\u00ed que o uso do elemento <code>&lt;datalist&gt;</code> se torna \u00fatil.</p> <p>O <code>&lt;datalist&gt;</code> \u00e9 usado com um elemento <code>&lt;input type=\"text\"&gt;</code>. O <code>&lt;input&gt;</code>cria um campo de texto onde os usu\u00e1rios podem digitar e filtrar op\u00e7\u00f5es do <code>&lt;datalist&gt;</code>. Vejamos um exemplo concreto:</p> <pre><code>&lt;form&gt;\n  &lt;label for=\"cidade\"&gt;Cidade ideal para visitar?&lt;/label&gt;\n  &lt;input type=\"text\" list=\"cidades\" id=\"cidade\" name=\"cidade\"&gt;\n  &lt;datalist id=\"cidades\"&gt;\n    &lt;option value=\"Cidade de Nova York\"&gt;&lt;/option&gt;\n    &lt;option value=\"T\u00f3quio\"&gt;&lt;/option&gt;\n    &lt;option value=\"Barcelona\"&gt;&lt;/option&gt;\n    &lt;option value=\"Cidade do M\u00e9xico\"&gt;&lt;/option&gt;\n    &lt;option value=\"Melbourne\"&gt;&lt;/option&gt;\n    &lt;option value=\"Outro\"&gt;&lt;/option&gt;\n  &lt;/datalist&gt;\n&lt;/form&gt;\n</code></pre> Cidade ideal para visitar? <p>Observe que no c\u00f3digo acima, temos um <code>&lt;input&gt;</code> que possui um atributo de lista. O <code>&lt;input&gt;</code> est\u00e1 associado ao <code>&lt;datalist&gt;</code> atrav\u00e9s do atributo de lista do <code>&lt;input&gt;</code> e do id do <code>&lt;datalist&gt;</code>.</p> <p>Embora <code>&lt;select&gt;</code> e <code>&lt;datalist&gt;</code> compartilhem algumas semelhan\u00e7as, existem algumas diferen\u00e7as importantes. No elemento <code>&lt;input&gt;</code> associado, os usu\u00e1rios podem digitar no campo de entrada para procurar uma op\u00e7\u00e3o espec\u00edfica. Se nenhuma das <code>&lt;option&gt;</code> corresponder, o usu\u00e1rio ainda poder\u00e1 usar o que digitou. Quando o formul\u00e1rio for enviado, o valor do nome da <code>&lt;input&gt;</code> e o valor da op\u00e7\u00e3o selecionada, ou o que o usu\u00e1rio digitou , \u00e9 enviado como um par.</p>"},{"location":"html/elementos/body/form/submit/","title":"Bot\u00e3o Enviar","text":""},{"location":"html/elementos/body/form/submit/#elementos-avancados-body","title":"Elementos Avan\u00e7ados: Body","text":""},{"location":"html/elementos/body/form/submit/#botao-submit-formulario","title":"Bot\u00e3o Submit Formul\u00e1rio","text":"<p>Lembre-se de que o objetivo de um formul\u00e1rio \u00e9 coletar informa\u00e7\u00f5es que ser\u00e3o enviadas. Essa \u00e9 a fun\u00e7\u00e3o do bot\u00e3o enviar \u2013 os usu\u00e1rios clicam nele quando terminam de preencher as informa\u00e7\u00f5es no <code>&lt;form&gt;</code> e est\u00e3o prontos para envi\u00e1-las. Agora que j\u00e1 vimos como criar v\u00e1rios elementos de entrada, vamos ver como criar um bot\u00e3o de envio!</p> <p>Para fazer um bot\u00e3o de envio em um <code>&lt;form&gt;</code>, usaremos o elemento <code>&lt;input&gt;</code> confi\u00e1vel e definiremos o tipo como \"enviar\". Por exemplo:</p> <pre><code>&lt;form&gt;\n  &lt;input type=\"submit\" value=\"Enviar\"&gt;\n&lt;/form&gt;\n</code></pre> <p>Observe no trecho de c\u00f3digo que o valor atribu\u00eddo ao <code>&lt;input&gt;</code> aparece como texto no bot\u00e3o enviar. Se n\u00e3o houver um atributo de valor, o texto padr\u00e3o, Enviar, aparecer\u00e1 no bot\u00e3o.</p>"},{"location":"html/elementos/body/form/textarea/","title":"TextArea","text":""},{"location":"html/elementos/body/form/textarea/#elementos-avancados-body","title":"Elementos Avan\u00e7ados: Body","text":""},{"location":"html/elementos/body/form/textarea/#textarea","title":"Textarea","text":"<p>Um elemento <code>&lt;input&gt;</code> com <code>type=\"text\"</code> cria um campo de entrada de linha \u00fanica para os usu\u00e1rios digitarem informa\u00e7\u00f5es. No entanto, h\u00e1 casos em que os usu\u00e1rios precisam escrever mais informa\u00e7\u00f5es, como uma postagem de blog. Nesses casos, em vez de usar um <code>&lt;input&gt;</code>, poder\u00edamos usar <code>&lt;textarea&gt;</code>.</p> <p>O elemento <code>&lt;textarea&gt;</code> \u00e9 usado para criar um campo de texto maior para os usu\u00e1rios escreverem mais texto. Podemos adicionar os atributos rows e cols para determinar a quantidade de linhas e colunas da <code>&lt;textarea&gt;</code>. D\u00ea uma olhada:</p> <pre><code>&lt;form&gt;\n  &lt;label for=\"blog\"&gt;Nova postagem no blog: &lt;/label&gt;\n  &lt;br&gt;\n  &lt;textarea id=\"blog\" name=\"blog\" rows=\"5\" cols=\"30\"&gt;\n  &lt;/textarea&gt;\n&lt;/form&gt;\n</code></pre> Nova postagem no blog:  <p>Quando submetemos o formul\u00e1rio, o valor de <code>&lt;textarea&gt;</code> \u00e9 o texto escrito dentro da caixa. Se quisermos adicionar um valor padr\u00e3o a <code>&lt;textarea&gt;</code> n\u00f3s o incluiremos nas tags de abertura e fechamento da seguinte forma:</p> <pre><code>&lt;textarea&gt;Adicionando texto padr\u00e3o&lt;/textarea&gt;\n</code></pre> Adicionando texto padr\u00e3o"},{"location":"html/elementos/body/form/validations/intro/","title":"Elementos Avan\u00e7ados: Body","text":""},{"location":"html/elementos/body/form/validations/intro/#validacoes","title":"Valida\u00e7\u00f5es","text":"<p>Voc\u00ea j\u00e1 se perguntou como uma p\u00e1gina de login realmente funciona? Ou por que a combina\u00e7\u00e3o de nome de usu\u00e1rio e senha concede acesso a um site? As respostas est\u00e3o na valida\u00e7\u00e3o. Valida\u00e7\u00e3o \u00e9 o conceito de verificar os dados fornecidos pelo usu\u00e1rio em rela\u00e7\u00e3o aos dados necess\u00e1rios.</p> <p>Existem diferentes tipos de valida\u00e7\u00e3o. Um tipo \u00e9 a valida\u00e7\u00e3o do lado do servidor, que acontece quando os dados s\u00e3o enviados para outra m\u00e1quina (normalmente um servidor) para valida\u00e7\u00e3o. Um exemplo desse tipo de valida\u00e7\u00e3o \u00e9 a utiliza\u00e7\u00e3o de uma p\u00e1gina de login. O formul\u00e1rio na p\u00e1gina de login aceita a entrada de nome de usu\u00e1rio e senha e, em seguida, envia os dados para um servidor que verifica se o par corresponde corretamente.</p> <p>Por outro lado, usamos a valida\u00e7\u00e3o do lado do cliente se quisermos verificar os dados no navegador (o cliente). Essa valida\u00e7\u00e3o ocorre antes dos dados serem enviados ao servidor. Navegadores diferentes implementam a valida\u00e7\u00e3o do lado do cliente de maneira diferente, mas levam ao mesmo resultado.</p> <p>Compartilhados entre os diferentes navegadores est\u00e3o os benef\u00edcios de usar a valida\u00e7\u00e3o integrada do lado do cliente do HTML5. Isso nos poupa tempo de ter que enviar informa\u00e7\u00f5es ao servidor e esperar que o servidor envie de volta a confirma\u00e7\u00e3o ou rejei\u00e7\u00e3o dos dados. Isso tamb\u00e9m pode nos ajudar a proteger nosso servidor contra c\u00f3digos maliciosos ou dados de um usu\u00e1rio mal-intencionado. Tamb\u00e9m nos permite fornecer feedback rapidamente aos usu\u00e1rios sobre campos espec\u00edficos, em vez de faz\u00ea-los preencher um formul\u00e1rio novamente se os dados inseridos no formul\u00e1rio forem rejeitados.</p> <p>Nesta li\u00e7\u00e3o, aprenderemos como adicionar algumas verifica\u00e7\u00f5es de valida\u00e7\u00e3o aos nossos <code>&lt;form&gt;s</code>!</p>"},{"location":"html/elementos/body/form/validations/length/","title":"Length (Tamanho)","text":""},{"location":"html/elementos/body/form/validations/length/#elementos-avancados-body","title":"Elementos Avan\u00e7ados: Body","text":""},{"location":"html/elementos/body/form/validations/length/#validacoes-inputs-minlength-e-maxlength","title":"Valida\u00e7\u00f5es Inputs: MinLength e MaxLength","text":"<p>No exerc\u00edcio anterior, conseguimos usar min e max para definir valores m\u00ednimos e m\u00e1ximos aceit\u00e1veis \u200b\u200bem um campo num\u00e9rico. Mas e quanto aos campos de texto? Certamente h\u00e1 casos em que n\u00e3o queremos que nossos usu\u00e1rios digitem mais do que um certo n\u00famero de caracteres (pense no limite de caracteres para mensagens no Twitter). Podemos at\u00e9 querer definir um n\u00famero m\u00ednimo de caracteres. Convenientemente, h\u00e1 valida\u00e7\u00f5es HTML5 integradas para essas situa\u00e7\u00f5es.</p> <p>Para definir um n\u00famero m\u00ednimo de caracteres para um campo de texto, adicionamos o atributo minlength e um valor para definir um valor m\u00ednimo. Da mesma forma, para definir o n\u00famero m\u00e1ximo de caracteres para um campo de texto, usamos o atributo maxlength e definimos um valor m\u00e1ximo. Vamos dar uma olhada nesses atributos no c\u00f3digo:</p> <pre><code>&lt;form&gt;\n  &lt;label for=\"resumo\"&gt;Exemplo at\u00e9 10 caracteres&lt;/label&gt;\n  &lt;input id=\"resumo\" name=\"resumo\" type=\"text\" minlength=\"5\" maxlength=\"10\" required&gt;\n  &lt;input type=\"submit\" value=\"Enviar\"&gt;\n&lt;/form&gt;\n</code></pre> Exemplo at\u00e9 10 caracteres <p>Se um usu\u00e1rio tentar enviar o <code>&lt;form&gt;</code> com menos do que o m\u00ednimo definido, uma mensagem ir\u00e1 aparecer pedindo que insira a quantidade m\u00ednima de caracteres.</p> <p>E se um usu\u00e1rio tentar digitar mais do que o n\u00famero m\u00e1ximo permitido de caracteres, ele n\u00e3o receber\u00e1 uma mensagem de aviso, mas n\u00e3o poder\u00e1 digitar mais!</p>"},{"location":"html/elementos/body/form/validations/min-max/","title":"Min-Max (M\u00ednimo e M\u00e1ximo)","text":""},{"location":"html/elementos/body/form/validations/min-max/#elementos-avancados-body","title":"Elementos Avan\u00e7ados: Body","text":""},{"location":"html/elementos/body/form/validations/min-max/#validacoes-inputs-min-max","title":"Valida\u00e7\u00f5es Inputs: Min-Max","text":"<p>Outra valida\u00e7\u00e3o interna que podemos usar \u00e9 atribuir um valor m\u00ednimo ou m\u00e1ximo para um campo num\u00e9rico, por exemplo, <code>&lt;input type=\"number\"&gt;</code> e <code>&lt;input type=\"range\"&gt;</code>. Para definir um valor m\u00ednimo aceit\u00e1vel, usamos o atributo min e atribu\u00edmos um valor. Por outro lado, para definir um valor m\u00e1ximo aceit\u00e1vel, atribu\u00edmos um valor ao atributo max. Vamos ver isso no c\u00f3digo:</p> <pre><code>&lt;form &gt;\n  &lt;label for=\"convidados\"&gt;Digite o n\u00famero de convidados:&lt;/label&gt;\n  &lt;input id=\"convidados\" name=\"convidados\" type=\"number\" min=\"1\" max=\"4\"&gt;\n  &lt;input type=\"submit\" value=\"Enviar\"&gt;\n&lt;/form&gt;\n</code></pre> Digite o n\u00famero de convidados: <p>Se um usu\u00e1rio tentar enviar uma entrada menor que 1, um aviso aparecer\u00e1: prompt em um campo num\u00e9rico para o usu\u00e1rio inserir um valor maior ou igual a 1</p> <p>Uma mensagem semelhante aparecer\u00e1 se um usu\u00e1rio tentar inserir um n\u00famero maior que 4. Vamos ver agora esta a\u00e7\u00e3o.</p>"},{"location":"html/elementos/body/form/validations/pattern/","title":"Pattern (M\u00e1scara)","text":""},{"location":"html/elementos/body/form/validations/pattern/#elementos-avancados-body","title":"Elementos Avan\u00e7ados: Body","text":""},{"location":"html/elementos/body/form/validations/pattern/#validacoes-inputs-pattern","title":"Valida\u00e7\u00f5es Inputs: Pattern","text":"<p>Al\u00e9m de verificar o comprimento de um texto, tamb\u00e9m poder\u00edamos adicionar uma valida\u00e7\u00e3o para verificar como o texto foi fornecido. Para casos em que queremos que a entrada do usu\u00e1rio siga diretrizes espec\u00edficas, usamos o atributo pattern e atribu\u00edmos a ele uma express\u00e3o regular, ou regex. Express\u00f5es regulares s\u00e3o uma sequ\u00eancia de caracteres que comp\u00f5em um padr\u00e3o de pesquisa. Se a entrada corresponder \u00e0 regex, o formul\u00e1rio pode ser enviado.</p> <p>Digamos que queremos verificar um n\u00famero de cart\u00e3o de cr\u00e9dito v\u00e1lido (um n\u00famero de 14 a 16 d\u00edgitos). Poder\u00edamos usar a regex: [0-9]{14,16} que verifica se o usu\u00e1rio forneceu apenas n\u00fameros e que ele inseriu pelo menos 14 d\u00edgitos e no m\u00e1ximo 16 d\u00edgitos.</p> <p>Para adicionar isso a um formul\u00e1rio:</p> <pre><code>&lt;form&gt;\n  &lt;label for=\"pagamento\"&gt;N\u00famero do telefone (sem espa\u00e7os):&lt;/label&gt;\n  &lt;br&gt;\n  &lt;input id=\"pagamento\" name=\"pagamento\" type=\"text\" required pattern=\"[0-9]{8,9}\"&gt;\n  &lt;input type=\"submit\" value=\"Enviar\"&gt;\n&lt;/form&gt;\n</code></pre> N\u00famero do telefone (sem espa\u00e7os): <p>Com o padr\u00e3o em vigor, os usu\u00e1rios n\u00e3o podem enviar o <code>&lt;form&gt;</code> com um n\u00famero que n\u00e3o siga o regex. Quando eles tentarem, ver\u00e3o uma mensagem de valida\u00e7\u00e3o.</p> <p>Se voc\u00ea quiser saber mais sobre o Regex, clique aqui.</p>"},{"location":"html/elementos/body/form/validations/regex/","title":"RegExp","text":"<p>O objeto <code>RegExp</code> \u00e9 usado para correspond\u00eancia de strings com Express\u00f5es Regulares. Uma Express\u00e3o Regular \u00e9 uma string especial, chamada de padr\u00e3o, que usa v\u00e1rias sequ\u00eancias de caracteres para definir as caracter\u00edsticas a serem correspondidas em uma sequ\u00eancia de caracteres dentro de outra string.</p> <p>Um objeto <code>RegExp</code> tamb\u00e9m pode ter flags configuradas junto com um padr\u00e3o para mudar como as correspond\u00eancias s\u00e3o realizadas.</p>"},{"location":"html/elementos/body/form/validations/regex/#sintaxe","title":"Sintaxe","text":"<p>Existem dois m\u00e9todos para criar um objeto <code>RegExp</code>. O primeiro m\u00e9todo \u00e9 a nota\u00e7\u00e3o literal usando barras para delimitar o padr\u00e3o, seguido por quaisquer flags. O segundo m\u00e9todo usa o construtor <code>RegExp</code>, que leva o padr\u00e3o como o primeiro argumento e quaisquer flags como o segundo.</p> <pre><code>// Usando nota\u00e7\u00e3o literal\nlet re1 = /foo?/i;\n\n// Usando o construtor RegExp\nlet re2 = new RegExp('foo?', 'i');\n\n// Ambos criam um objeto RegExp com um padr\u00e3o = \"foo?\" e uma flag = \"i\"\n</code></pre> <p>H\u00e1 uma diferen\u00e7a entre os m\u00e9todos. A nota\u00e7\u00e3o literal compila quando a express\u00e3o \u00e9 avaliada. Ela deve ser usada quando o padr\u00e3o permanecer\u00e1 constante, para n\u00e3o ser recompilada desnecessariamente, como em um loop.</p> <p>Usar o construtor de objeto significa que a express\u00e3o ser\u00e1 compilada em tempo de execu\u00e7\u00e3o. Deve ser usado quando o padr\u00e3o do objeto RegExp estiver sujeito a mudan\u00e7as, ou o padr\u00e3o for obtido em tempo de execu\u00e7\u00e3o, como de uma entrada do usu\u00e1rio.</p>"},{"location":"html/elementos/body/form/validations/regex/#propriedades-do-regexp","title":"Propriedades do RegExp","text":"Propriedade Descri\u00e7\u00e3o .flags Retorna uma string contendo as flags do objeto RegExp. .dotAll O . corresponde a novas linhas ou n\u00e3o? .global O objeto RegExp testa todas as correspond\u00eancias em uma string ou apenas a primeira? .hasIndices O resultado da Express\u00e3o Regular exp\u00f5e os \u00edndices de in\u00edcio e fim das substrings capturadas? .ignoreCase O objeto RegExp ignora mai\u00fasculas e min\u00fasculas ao realizar uma correspond\u00eancia? .multiline O objeto RegExp realiza correspond\u00eancias em v\u00e1rias linhas? .source O texto do padr\u00e3o usado pelo objeto RegExp. .sticky A pesquisa \u00e9 r\u00edgida? (A pr\u00f3xima correspond\u00eancia tem que ocorrer em lastIndex ou podemos corresponder a pr\u00f3xima ocorr\u00eancia ap\u00f3s lastIndex?) .unicode Os recursos Unicode est\u00e3o habilitados? .lastIndex O \u00edndice no qual come\u00e7ar a pr\u00f3xima correspond\u00eancia."},{"location":"html/elementos/body/form/validations/regex/#metodos-do-regexp","title":"M\u00e9todos do RegExp","text":"M\u00e9todo Descri\u00e7\u00e3o .exec(str) Executa uma busca na string str. .test(str) Testa uma correspond\u00eancia na string str."},{"location":"html/elementos/body/form/validations/regex/#metodos-da-string-que-podem-usar-objetos-regexp","title":"M\u00e9todos da String que Podem Usar Objetos RegExp","text":"<p>Nos exemplos abaixo, re \u00e9 um objeto RegExp.</p> M\u00e9todo Descri\u00e7\u00e3o .match(re) Retorna o array resultado das correspond\u00eancias na string. .matchAll(re) Retorna um iterador de todas as correspond\u00eancias encontradas na string.* .replace(re, substr) Substitui correspond\u00eancias na string por uma substring dada, substr. .search(re) Retorna o \u00edndice da primeira correspond\u00eancia na string. .split(re) Divide a string em um array usando as correspond\u00eancias como delimitadores. <p>O objeto RegExp deve ter a flag g definida ou uma exce\u00e7\u00e3o \u00e9 lan\u00e7ada.</p>"},{"location":"html/elementos/body/form/validations/regex/#flags-do-regexp","title":"Flags do RegExp","text":"<p>Quando especificadas, essas flags mudam o comportamento padr\u00e3o da correspond\u00eancia do objeto RegExp.</p> Flag Descri\u00e7\u00e3o g Realiza uma correspond\u00eancia global, encontrando todas as correspond\u00eancias em vez de apenas a primeira. i Torna as correspond\u00eancias insens\u00edveis a mai\u00fasculas e min\u00fasculas. Corresponde tanto mai\u00fasculas quanto min\u00fasculas. m Realiza correspond\u00eancias em v\u00e1rias linhas. (Muda o comportamento de ^,$) s Permite que . corresponda a caracteres de nova linha. u Habilita suporte a Unicode. y As correspond\u00eancias s\u00e3o r\u00edgidas, procurando apenas na posi\u00e7\u00e3o exata no texto. <p>Uso:</p> <pre><code>let re1 = /foo?/gim;\n\nlet re2 = new RegExp('foo?', 'gim');\n\n// Cria um objeto RegExp que realiza uma busca global, insens\u00edvel a mai\u00fasculas e min\u00fasculas, em v\u00e1rias linhas\n</code></pre>"},{"location":"html/elementos/body/form/validations/regex/#expressoes-regulares","title":"Express\u00f5es Regulares","text":"<p>Os seguintes caracteres s\u00e3o usados para definir uma string de Express\u00e3o Regular.</p>"},{"location":"html/elementos/body/form/validations/regex/#asercoes","title":"Aser\u00e7\u00f5es","text":"<p>Os seguintes correspondem \u00e0s fronteiras entre caracteres, n\u00e3o aos pr\u00f3prios caracteres.</p> Caracteres Significado ^ Corresponde ao in\u00edcio da entrada. Em busca de v\u00e1rias linhas, corresponde imediatamente ap\u00f3s um caractere de quebra de linha. $ Corresponde ao final da entrada. Em busca de v\u00e1rias linhas, corresponde imediatamente antes de um caractere de quebra de linha. \\b Corresponde a uma fronteira de palavra. Ponto onde um caractere de palavra n\u00e3o \u00e9 seguido por outro caractere de palavra ou o ponto onde um caractere de palavra n\u00e3o \u00e9 precedido por outro caractere de palavra. \\B Corresponde a uma fronteira n\u00e3o-palavra. Ponto onde o caractere precedente e o seguinte s\u00e3o do mesmo tipo. <p>Os seguintes correspondem a um caractere ou express\u00e3o com base no que segue ou precede.</p> Caracteres Significado x(?=y) Corresponde x apenas se x for seguido imediatamente por y. y n\u00e3o faz parte dos resultados da correspond\u00eancia. x(?!y) Corresponde x apenas se x n\u00e3o for seguido imediatamente por y. y n\u00e3o faz parte dos resultados da correspond\u00eancia. (?&lt;=y)x Corresponde x apenas se x for precedido imediatamente por y. y n\u00e3o faz parte dos resultados da correspond\u00eancia. (?&lt;!y)x Corresponde x apenas se x n\u00e3o for precedido imediatamente por y. y n\u00e3o faz parte dos resultados da correspond\u00eancia. <p>Exemplos</p> <pre><code>let str = 'Sally sells seashells by the seashore';\nlet re = /s(?=e)/gi;\nconsole.log(str.replace(re, 'x'));\n// Sa\u00edda: Sally xells xeashells by the xeashore\n\nre = /s(?!e)/gi;\nconsole.log(str.replace(re, 'x'));\n// Sa\u00edda: xally sellx seaxhellx by the seaxhore\n\nre = /^s/gi;\nconsole.log(str.replace(re, 'x'));\n// Sa\u00edda: xally sells seashells by the seashore\n\nre = /\\Bs/gi;\nconsole.log(str.replace(re, 'x'));\n// Sa\u00edda: Sally sellx seaxhellx by the seaxhore\n</code></pre>"},{"location":"html/elementos/body/form/validations/regex/#classes-de-caracteres","title":"Classes de Caracteres","text":"<p>Classes de caracteres especificam um tipo de caractere a ser correspondido.</p> Caracteres Significado . Corresponde a qualquer caractere exceto terminadores de linha. Quando a flag s est\u00e1 definida, tamb\u00e9m corresponde a terminadores de linha. \\d Corresponde a qualquer d\u00edgito (n\u00famero ar\u00e1bico). \\D Corresponde a qualquer caractere que n\u00e3o seja um d\u00edgito (n\u00famero ar\u00e1bico). \\w Corresponde a qualquer caractere alfanum\u00e9rico do alfabeto latino, incluindo sublinhado. \\W Corresponde a qualquer caractere que n\u00e3o seja um caractere alfanum\u00e9rico do alfabeto latino ou sublinhado. \\s Corresponde a qualquer caractere de espa\u00e7o em branco (espa\u00e7o, tabula\u00e7\u00e3o, nova linha, espa\u00e7o n\u00e3o separ\u00e1vel e similares). \\S Corresponde a qualquer caractere que n\u00e3o seja um caractere de espa\u00e7o em branco. \\t Corresponde a uma tabula\u00e7\u00e3o horizontal. \\r Corresponde a um retorno de carro. \\n Corresponde a uma alimenta\u00e7\u00e3o de linha. \\v Corresponde a uma tabula\u00e7\u00e3o vertical. \\f Corresponde a uma alimenta\u00e7\u00e3o de formul\u00e1rio. \\b Corresponde a um backspace. \\0 Corresponde a um caractere NUL (quando n\u00e3o seguido por outro d\u00edgito). \\xnn Corresponde ao c\u00f3digo de caractere nn (dois d\u00edgitos hexadecimais). \\unnnn Corresponde a uma unidade de c\u00f3digo UTF-16 com o valor nnnn (quatro d\u00edgitos hexadecimais). \\ Seguido por um caractere especial, significa que o caractere deve ser correspondido literalmente. <p>Exemplo</p> <pre><code>let str = '2001: A Space Odyssey';\n\nlet re = /\\W/gi;\nconsole.log(str.replace(re, 'x'));\n// Sa\u00edda: 2001xxAxSpacexOdyssey\n\nre = /\\d/gi;\nconsole.log(str.replace(re, 'x'));\n// Sa\u00edda: xxxx: A Space Odyssey\n\nre = /\\d\\D/gi;\nconsole.log(str.replace(re, 'x'));\n// Sa\u00edda: 200x A Space Odyssey\n</code></pre>"},{"location":"html/elementos/body/form/validations/regex/#grupos-e-intervalos","title":"Grupos e Intervalos","text":"<p>Indica grupos e intervalos de caracteres para combinar.</p> Caracteres Significado <code>x (pipe) y</code> Combina x ou y. <code>[xyz]</code> Combina o caractere x, y ou z. <code>[a-c]</code> Combina o caractere que est\u00e1 entre a e c inclusive (a, b e c). <code>[^xyz]</code> Combina o caractere que n\u00e3o \u00e9 x, y ou z. <code>[^a-c]</code> Combina o caractere que n\u00e3o est\u00e1 entre a e c inclusive (n\u00e3o a, b ou c). <code>(x)</code> Combina x e lembra o resultado, capturando o grupo. <code>\\n</code> Onde n \u00e9 um inteiro positivo, representa uma refer\u00eancia inversa \u00e0 \u00faltima substring que corresponde ao n-\u00e9simo grupo capturado. <code>(?&lt;Name&gt;x)</code> Combina x e armazena no objeto de grupos das correspond\u00eancias retornadas sob o nome Nome. <code>\\k&lt;Name&gt;</code> Representa uma refer\u00eancia inversa \u00e0 \u00faltima substring correspondente no grupo de captura nomeado especificado por Nome. <code>(?)</code> Representa um grupo de n\u00e3o captura. Combina x, mas n\u00e3o lembra o resultado. <p>* (pipe) significa |</p> <p>Se o h\u00edfen estiver no in\u00edcio ou no final da sequ\u00eancia entre colchetes, \u00e9 tratado como um h\u00edfen literal.</p> <p>Exemplo</p> <pre><code>let str = 'Peter Piper picked a peck of pickled peppers.';\n\nlet re = /[aeiou]/gi;\nconsole.log(str.replace(re, 'x'));\n// Sa\u00edda: Pxtxr Pxpxr pxckxd x pxck xf pxcklxd pxppxrs.\n\nre = /[^p]/gi;\nconsole.log(str.replace(re, 'x'));\n// Sa\u00edda: PxxxxxPxpxxxpxxxxxxxxpxxxxxxxpxxxxxxxpxppxxxx\n\nre = /pi(ck|pe)/gi;\nconsole.log(str.replace(re, 'x'));\n// Sa\u00edda: Peter xr xed a peck of xled peppers.\n\n</code></pre>"},{"location":"html/elementos/body/form/validations/regex/#quantificadores","title":"Quantificadores","text":"<p>Os quantificadores especificam o n\u00famero de caracteres ou express\u00f5es a serem combinados.</p> Caracteres Significado x* Combina o item precedente x zero ou mais vezes. x+ Combina o item precedente x uma ou mais vezes. x? Combina o item precedente x zero ou uma vez. x{n} Combina o item precedente x n vezes, onde n \u00e9 um inteiro positivo. x{n,} Combina o item precedente x n ou mais vezes, onde n \u00e9 um inteiro positivo. x{n,m} Combina o item precedente x pelo menos n vezes e no m\u00e1ximo m vezes, onde n e m s\u00e3o inteiros positivos e n \u00e9 menor que m. <p>Por padr\u00e3o, esses quantificadores s\u00e3o gananciosos, correspondendo o m\u00e1ximo poss\u00edvel da string. Seguindo o quantificador com <code>? (x\\*?)</code>, a correspond\u00eancia ser\u00e1 interrompida em sua primeira ocorr\u00eancia.</p> <p>Exemplo</p> <pre><code>let str = 'Billy bought a bushel of blue balloons.';\n\nlet re = /b.?l+/gi;\nconsole.log(str.replace(re, 'x'));\n// Sa\u00edda: xy bought a bushel of xue xoons.\n\nre = /[olu]{2}/gi;\nconsole.log(str.replace(re, 'x'));\n// Sa\u00edda: Bixy bxght a bushel of bxe baxxns.\n\nre = /l\\w*/gi;\nconsole.log(str.replace(re, 'x'));\n// Sa\u00edda: Bix bought a bushex of bx bax.\n\nre = /o\\w+?/gi;\nconsole.log(str.replace(re, 'x'));\n// Sa\u00edda: Billy bxght a bushel x blue balxns.\n</code></pre>"},{"location":"html/elementos/body/form/validations/required/","title":"Required (Obrigat\u00f3rio)","text":""},{"location":"html/elementos/body/form/validations/required/#elementos-avancados-body","title":"Elementos Avan\u00e7ados: Body","text":""},{"location":"html/elementos/body/form/validations/required/#validacoes-inputs-required","title":"Valida\u00e7\u00f5es Inputs: Required","text":"<p>\u00c0s vezes temos campos em nossos <code>&lt;form&gt;s</code> que n\u00e3o s\u00e3o opcionais, ou seja, devem ser fornecidas informa\u00e7\u00f5es antes de podermos envi\u00e1-las. Para fazer cumprir esta regra, podemos adicionar o atributo obrigat\u00f3rio a um elemento <code>&lt;input&gt;</code>.</p> <p>Considere por exemplo:</p> <pre><code>&lt;form&gt;\n  &lt;label for=\"alergias\"&gt;Voc\u00ea tem alguma restri\u00e7\u00e3o alimentar?&lt;/label&gt;\n  &lt;br&gt;\n  &lt;input id=\"alergias\" name=\"alergias\" tipo=\"text\" required&gt;\n  &lt;br&gt;\n  &lt;input type=\"submit\" value=\"Enviar\"&gt;\n&lt;/form&gt;\n</code></pre> Voc\u00ea tem alguma restri\u00e7\u00e3o alimentar? <p>O estilo da mensagem varia de navegador para navegador.</p>"},{"location":"html/elementos/body/table/intro/","title":"Elementos Avan\u00e7ados: Body","text":""},{"location":"html/elementos/body/table/intro/#tabela-basica-table","title":"Tabela B\u00e1sica <code>&lt;table&gt;</code>","text":"<p>Existem muitos sites na Internet que exibem informa\u00e7\u00f5es como pre\u00e7os de a\u00e7\u00f5es, resultados esportivos, dados de faturas e muito mais. Esses dados s\u00e3o de natureza tabular, o que significa que uma tabela geralmente \u00e9 a melhor maneira de apresentar os dados.</p> <p>Antes de exibir os dados, devemos primeiro criar a tabela que conter\u00e1 os dados usando o elemento <code>&lt;table&gt;</code>.</p> <pre><code>&lt;table&gt;\n\n&lt;/table&gt;\n</code></pre> <p>O elemento <code>&lt;table&gt;</code> conter\u00e1 todos os dados tabulares que planejamos exibir.</p> <p>Em muitos programas que usam tabelas, a tabela j\u00e1 est\u00e1 predefinida para voc\u00ea, o que significa que ela cont\u00e9m as linhas, colunas e c\u00e9lulas que conter\u00e3o os dados. Em HTML, todos esses componentes devem ser criados.</p> <p>A primeira etapa para inserir dados na tabela \u00e9 adicionar linhas usando o elemento de linha da tabela: <code>&lt;tr&gt;</code>.</p> <pre><code>&lt;table&gt;\n  &lt;tr&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n  &lt;/tr&gt;\n&lt;/table&gt;\n</code></pre> <p>As linhas n\u00e3o s\u00e3o suficientes para adicionar dados a uma tabela. Cada elemento da c\u00e9lula tamb\u00e9m deve ser definido. Em HTML, voc\u00ea pode adicionar dados usando o elemento de dados da tabela: <code>&lt;td&gt;</code>.</p> <pre><code>&lt;table&gt;\n  &lt;tr&gt;\n    &lt;td&gt;73&lt;/td&gt;\n    &lt;td&gt;81&lt;/td&gt;\n  &lt;/tr&gt;\n&lt;/table&gt;\n</code></pre> <p>No exemplo acima, dois pontos de dados (73 e 81) foram inseridos na \u00fanica linha que existe. Ao adicionar dois pontos de dados, criamos duas c\u00e9lulas de dados.</p> 73 81 <p>Os dados da tabela n\u00e3o fazem muito sentido sem t\u00edtulos para descrever o que os dados representam.</p> <p>Para adicionar t\u00edtulos a linhas e colunas, voc\u00ea pode usar o elemento de cabe\u00e7alho da tabela: <code>&lt;th&gt;</code>.</p> <p>O elemento de cabe\u00e7alho da tabela \u00e9 usado como um elemento de dados de tabela, exceto com um t\u00edtulo relevante. Assim como os dados da tabela, o cabe\u00e7alho da tabela deve ser colocado dentro de uma linha da tabela.</p> <pre><code>&lt;table&gt;\n  &lt;tr&gt;\n    &lt;th&gt;&lt;/th&gt;\n    &lt;th scope=\"col\"&gt;S\u00e1bado&lt;/th&gt;\n    &lt;th scope=\"col\"&gt;Domingo&lt;/th&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;th scope=\"row\"&gt;Temperatura&lt;/th&gt;\n    &lt;td&gt;73&lt;/td&gt;\n    &lt;td&gt;81&lt;/td&gt;\n  &lt;/tr&gt;\n&lt;/table&gt;\n</code></pre> <p>Uma nova linha foi adicionada para conter os tr\u00eas t\u00edtulos: um t\u00edtulo em branco, um t\u00edtulo de s\u00e1bado e um t\u00edtulo de domingo. O cabe\u00e7alho em branco cria a c\u00e9lula extra da tabela necess\u00e1ria para alinhar corretamente os t\u00edtulos da tabela sobre os dados aos quais correspondem.</p> <p>Na segunda linha, um cabe\u00e7alho de tabela foi adicionado como t\u00edtulo de linha: Temperatura.</p> <p>Quando renderizado, este c\u00f3digo aparecer\u00e1 semelhante \u00e0 tabela abaixo:</p> S\u00e1bado Domingo Temperatura 73 81 <p>Observe, tamb\u00e9m, o uso do atributo scope, que pode assumir um de dois valores:</p> <p>linha - este valor deixa claro que o t\u00edtulo \u00e9 para uma linha.</p> <p>col - este valor deixa claro que o t\u00edtulo \u00e9 para uma coluna.</p> <p>O c\u00f3digo HTML para tabelas pode parecer um pouco estranho no in\u00edcio, mas analis\u00e1-lo pe\u00e7a por pe\u00e7a ajuda a tornar o c\u00f3digo mais compreens\u00edvel.</p>"},{"location":"html/elementos/body/table/muitos-dados/","title":"Elementos Avan\u00e7ados: Body","text":""},{"location":"html/elementos/body/table/muitos-dados/#tabela-muitos-dados-table-thead-tbody-tfooter","title":"Tabela Muitos Dados <code>&lt;table&gt; &lt;thead&gt; &lt;tbody&gt; &lt;tfooter&gt;</code>","text":"<p>Com o tempo, uma tabela pode crescer e conter muitos dados e tornar-se muito longa. Quando isso acontece, a tabela pode ser seccionada para facilitar o gerenciamento.</p> <p>Tabelas longas podem ser seccionadas usando o elemento do corpo da tabela: <code>&lt;tbody&gt;</code>.</p> <p>O elemento <code>&lt;tbody&gt;</code> deve conter todos os dados da tabela, excluindo os t\u00edtulos da tabela.</p> <pre><code>&lt;table&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;S\u00e1bado&lt;/th&gt;\n      &lt;th&gt;Domingo&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Manh\u00e3&lt;/th&gt;\n      &lt;td rowspan=\"2\"&gt;Trabalho&lt;/td&gt;\n      &lt;td rowspan=\"3\"&gt;Relaxe&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n     &lt;th&gt;Tarde&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Noite&lt;/th&gt;\n      &lt;td&gt;Jantar&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n</code></pre> <p>No exemplo acima, todos os dados da tabela est\u00e3o contidos em um elemento do corpo da tabela. Observe, por\u00e9m, que os t\u00edtulos tamb\u00e9m foram mantidos no corpo da tabela.</p> <pre><code>&lt;table&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th scope=\"col\"&gt;S\u00e1bado&lt;/th&gt;\n      &lt;th scope=\"col\"&gt;Domingo&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;th scope=\"row\"&gt;Manh\u00e3&lt;/th&gt;\n      &lt;td rowspan=\"2\"&gt;Trabalho&lt;/td&gt;\n      &lt;td rowspan=\"3\"&gt;Relaxe&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n     &lt;th scope=\"row\"&gt;Tarde&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th scope=\"row\"&gt;Noite&lt;/th&gt;\n      &lt;td&gt;Jantar&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n</code></pre> <p>No exemplo acima, o \u00fanico elemento novo \u00e9 <code>&lt;thead&gt;</code>. Os t\u00edtulos da tabela est\u00e3o contidos neste elemento. Observe que o cabe\u00e7alho da tabela ainda requer uma linha para conter os t\u00edtulos da tabela.</p> <p>Al\u00e9m disso, apenas os t\u00edtulos das colunas ficam abaixo do elemento <code>&lt;thead&gt;</code>. Podemos usar o atributo scope em elementos <code>&lt;th&gt;</code> para indicar se um elemento <code>&lt;th&gt;</code> est\u00e1 sendo usado como t\u00edtulo de \"col\" ou \"row\".</p> <p>A parte inferior de uma tabela longa tamb\u00e9m pode ser seccionada usando o elemento <code>&lt;tfoot&gt;</code>.</p> <pre><code>&lt;table&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Trimestre&lt;/th&gt;\n      &lt;th&gt;Receita&lt;/th&gt;\n      &lt;th&gt;Custos&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;th&gt;1\u00ba trimestre&lt;/th&gt;\n      &lt;td&gt;US$ 10 milh\u00f5es&lt;/td&gt;\n      &lt;td&gt;US$ 7,5 milh\u00f5es&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;2\u00ba trimestre&lt;/th&gt;\n      &lt;td&gt;US$ 12 milh\u00f5es&lt;/td&gt;\n      &lt;td&gt;US$ 5 milh\u00f5es&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n  &lt;tfooter&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Total&lt;/th&gt;\n      &lt;td&gt;US$ 22 milh\u00f5es&lt;/td&gt;\n      &lt;td&gt;US$ 12,5 milh\u00f5es&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tfoot&gt;\n&lt;/table&gt;\n</code></pre> <p>No exemplo acima, o rodap\u00e9 cont\u00e9m os totais dos dados da tabela. Os rodap\u00e9s costumam ser usados \u200b\u200bpara conter somas, diferen\u00e7as e outros resultados de dados.</p> Trimestre Receita Custos 1\u00ba trimestre US$ 10 milh\u00f5es US$ 7,5 milh\u00f5es 2\u00ba trimestre US$ 12 milh\u00f5es US$ 5 milh\u00f5es Total US$ 22 milh\u00f5es US$ 12,5 milh\u00f5es"},{"location":"html/elementos/head/title/","title":"Elementos Iniciais: Head","text":""},{"location":"html/elementos/head/title/#titulo-da-pagina-title","title":"T\u00edtulo da P\u00e1gina <code>&lt;title&gt;</code>","text":"<p>Que tipo de metadados sobre a p\u00e1gina da web o elemento <code>&lt;head&gt;</code> pode conter?</p> <p>Se voc\u00ea navegar at\u00e9 o cat\u00e1logo da Codecademy e olhar na parte superior do seu navegador, notar\u00e1 as palavras Todos os cursos e tutoriais | Codecademy, que \u00e9 o t\u00edtulo da p\u00e1gina web.</p> <p>A guia do navegador exibe o t\u00edtulo especificado na tag <code>&lt;title&gt;</code>. A tag <code>&lt;title&gt;</code> est\u00e1 sempre dentro do <code>&lt;head&gt;</code>.</p> <pre><code>&lt;!DOCTYPEhtml&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Meu di\u00e1rio de codifica\u00e7\u00e3o&lt;/title&gt;\n  &lt;/head&gt;\n&lt;/html&gt;\n</code></pre> <p>Se abr\u00edssemos um arquivo contendo o c\u00f3digo HTML do exemplo acima, o navegador exibiria as palavras My Coding Journal na barra de t\u00edtulo (ou no t\u00edtulo da guia).</p>"},{"location":"html/estrutura-base/body/","title":"Estrutura Base","text":""},{"location":"html/estrutura-base/body/#body","title":"Body","text":"<p>Um dos principais elementos HTML que usamos para construir uma p\u00e1gina da web \u00e9 o elemento body. Somente o conte\u00fado dentro das tags body de abertura e fechamento pode ser exibido na tela. Esta \u00e9 a apar\u00eancia das tags body de abertura e fechamento:</p> <pre><code>&lt;body&gt;\n&lt;/body&gt;\n</code></pre> <p>Depois que o arquivo tiver um body, muitos tipos diferentes de conte\u00fado \u2013 incluindo texto, imagens e bot\u00f5es \u2013 podem ser adicionados ao body.</p>"},{"location":"html/estrutura-base/head/","title":"Estrutura Base","text":""},{"location":"html/estrutura-base/head/#head","title":"Head","text":"<p>O elemento <code>&lt;head&gt;</code> faz parte desta met\u00e1fora HTML. Vai acima do nosso elemento <code>&lt;body&gt;</code>.</p> <p>O elemento <code>&lt;head&gt;</code> cont\u00e9m os metadados de uma p\u00e1gina web. Metadados s\u00e3o informa\u00e7\u00f5es sobre a p\u00e1gina que n\u00e3o s\u00e3o exibidas diretamente na p\u00e1gina da web. Ao contr\u00e1rio das informa\u00e7\u00f5es contidas na tag <code>&lt;body&gt;</code>, os metadados no cabe\u00e7alho s\u00e3o informa\u00e7\u00f5es sobre a pr\u00f3pria p\u00e1gina.</p> <p>As tags head de abertura e fechamento normalmente aparecem como o primeiro item ap\u00f3s sua primeira tag HTML:</p> <pre><code>&lt;head&gt;\n&lt;/head&gt;\n</code></pre>"},{"location":"html/estrutura-base/html/","title":"Estrutura Base","text":""},{"location":"html/estrutura-base/html/#hmtl","title":"HMTL","text":"<p>Os arquivos HTML requerem certos elementos para configurar o documento corretamente. Podemos informar aos navegadores que estamos usando HTML iniciando nosso documento com uma declara\u00e7\u00e3o de tipo de documento.</p> <p>A declara\u00e7\u00e3o fica assim:</p> <p><code>&lt;!DOCTYPE html&gt;</code></p> <p>Esta declara\u00e7\u00e3o \u00e9 uma instru\u00e7\u00e3o e deve ser a primeira linha do c\u00f3digo do seu documento HTML. Ele informa ao navegador que tipo de documento esperar, juntamente com qual vers\u00e3o do HTML est\u00e1 sendo usada no documento. Por enquanto, o navegador assumir\u00e1 corretamente que o html em <code>&lt;!DOCTYPE html&gt;</code> se refere ao HTML5, pois \u00e9 o padr\u00e3o atual.</p> <p>No futuro, por\u00e9m, um novo padr\u00e3o substituir\u00e1 o HTML5. Para garantir que seu documento seja sempre interpretado corretamente, sempre inclua <code>&lt;!DOCTYPE html&gt;</code> no in\u00edcio de seus documentos HTML.</p> <p>Por \u00faltimo, o c\u00f3digo HTML \u00e9 sempre salvo em um arquivo com extens\u00e3o .html.</p> <p>Para criar estrutura e conte\u00fado HTML, devemos adicionar tags de abertura e fechamento <code>&lt;html&gt;</code> ap\u00f3s declarar <code>&lt;!DOCTYPE html&gt;</code>:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\n&lt;/html&gt;\n</code></pre> <p>Qualquer coisa entre as tags de abertura <code>&lt;html&gt;</code> e de fechamento <code>&lt;/html&gt;</code> ser\u00e1 interpretada como c\u00f3digo HTML. Sem essas tags, \u00e9 poss\u00edvel que os navegadores interpretem incorretamente o seu c\u00f3digo HTML.</p>"},{"location":"html/semantica/article-section/","title":"Semantica","text":""},{"location":"html/semantica/article-section/#article-e-section","title":"Article e SectionCuriosidades sobre cr\u00edqueteCuriosidades sobre cr\u00edquete","text":"<p>Agora que cobrimos o corpo do HTML sem\u00e2ntico, vamos nos concentrar no que pode ir no corpo. Os dois elementos em que vamos nos concentrar agora s\u00e3o <code>&lt;section&gt;</code> e <code>&lt;article&gt;</code>.</p> <p><code>&lt;section&gt;</code> define elementos em um documento, como cap\u00edtulos, t\u00edtulos ou qualquer outra \u00e1rea do documento com o mesmo tema. Por exemplo, conte\u00fado com o mesmo tema, como artigos sobre cr\u00edquete, pode ficar em uma \u00fanica <code>&lt;section&gt;</code>. A p\u00e1gina inicial de um site pode ser dividida em se\u00e7\u00f5es para introdu\u00e7\u00e3o, not\u00edcias e informa\u00e7\u00f5es de contato.</p> <p>Aqui est\u00e1 um exemplo de como usar <code>&lt;section&gt;</code>:</p> <pre><code>&lt;section&gt;\n  &lt;h2&gt;Curiosidades sobre cr\u00edquete&lt;/h2&gt;\n&lt;/section&gt;\n</code></pre> <p>No c\u00f3digo acima, criamos um elemento <code>&lt;section&gt;</code> para encapsular o c\u00f3digo. Em <code>&lt;section&gt;</code>, adicionamos um elemento <code>&lt;h2&gt;</code> como t\u00edtulo.</p> <p>O elemento <code>&lt;article&gt;</code> cont\u00e9m conte\u00fado que faz sentido por si s\u00f3. <code>&lt;article&gt;</code> pode conter conte\u00fado como artigos, blogs, coment\u00e1rios, revistas, etc. Uma tag <code>&lt;article&gt;</code> ajudaria algu\u00e9m usando um leitor de tela a entender onde o conte\u00fado do artigo (que pode conter uma combina\u00e7\u00e3o de texto, imagens, \u00e1udio, etc.) come\u00e7a e termina.</p> <p>Aqui est\u00e1 um exemplo de como usar <code>&lt;article&gt;</code>:</p> <pre><code>&lt;section&gt;\n  &lt;h2&gt;Curiosidades sobre cr\u00edquete&lt;/h2&gt;\n  &lt;article&gt;\n    &lt;p&gt;Uma \u00fanica partida de cr\u00edquete pode durar at\u00e9 5 dias.&lt;/p&gt;\n  &lt;/article&gt;\n&lt;/section&gt;\n</code></pre> <p>Uma \u00fanica partida de cr\u00edquete pode durar at\u00e9 5 dias.</p> <p>No c\u00f3digo acima, o elemento <code>&lt;article&gt;</code> contendo um fato sobre cr\u00edquete foi colocado dentro do elemento <code>&lt;section&gt;</code>. \u00c9 importante observar que um elemento <code>&lt;section&gt;</code> tamb\u00e9m pode ser colocado em um elemento <code>&lt;article&gt;</code> dependendo do contexto.</p>"},{"location":"html/semantica/aside/","title":"Semantica","text":""},{"location":"html/semantica/aside/#aside","title":"Aside","text":"<p>O elemento <code>&lt;aside&gt;</code> \u00e9 usado para marcar informa\u00e7\u00f5es adicionais que podem aprimorar outro elemento, mas n\u00e3o s\u00e3o necess\u00e1rias para entender o conte\u00fado principal. Este elemento pode ser usado junto com outros elementos, como <code>&lt;article&gt;</code> ou <code>&lt;section&gt;</code>. Alguns usos comuns do elemento <code>&lt;aside&gt;</code> s\u00e3o para:</p> <ul> <li>Bibliografias</li> <li>Notas de rodap\u00e9</li> <li>Coment\u00e1rios</li> <li>Puxar cita\u00e7\u00f5es</li> <li>Barras laterais editoriais</li> <li>Informa\u00e7\u00f5es adicionais</li> </ul> <p>Aqui est\u00e1 um exemplo de <code>&lt;aside&gt;</code> sendo usado junto com <code>&lt;article&gt;</code>:</p> <pre><code>&lt;article&gt;\n  &lt;p&gt;\n    A primeira World Series foi disputada entre Pittsburgh e Boston em 1903 e foi uma s\u00e9rie de nove jogos.\n  &lt;/p&gt;\n&lt;/article&gt;\n&lt;aside&gt;\n  &lt;p&gt;\n    Babe Ruth uma vez afirmou: \"Her\u00f3is s\u00e3o lembrados, mas lendas nunca morrem.\"\n  &lt;/p&gt;\n&lt;/aside&gt;\n</code></pre> <p>       A primeira World Series foi disputada entre Pittsburgh e Boston em 1903 e foi uma s\u00e9rie de nove jogos.     </p> <p>       Babe Ruth uma vez afirmou: \"Her\u00f3is s\u00e3o lembrados, mas lendas nunca morrem.\"     </p> <p>Como mostrado acima, as informa\u00e7\u00f5es dentro do <code>&lt;article&gt;</code> s\u00e3o o conte\u00fado importante. Enquanto isso, as informa\u00e7\u00f5es dentro do <code>&lt;aside&gt;</code> aprimoram as informa\u00e7\u00f5es em <code>&lt;article&gt;</code>, mas n\u00e3o s\u00e3o necess\u00e1rias para entend\u00ea-las.</p>"},{"location":"html/semantica/audio-attributes/","title":"Semantica","text":""},{"location":"html/semantica/audio-attributes/#audio-e-atributos","title":"Audio e Atributos","text":"<p>Agora que aprendemos sobre conte\u00fado baseado em texto, vamos nos aprofundar em <code>&lt;audio&gt;</code>! Certamente todo mundo precisa de <code>&lt;audio&gt;</code> \u2014 de que outra forma voc\u00ea ouviria seu hip hop coreano?</p> <p>O elemento <code>&lt;audio&gt;</code> \u00e9 usado para incorporar conte\u00fado de \u00e1udio em um documento. Como <code>&lt;video&gt;</code>, <code>&lt;audio&gt;</code> usa <code>src</code> para vincular a fonte de \u00e1udio.</p> <pre><code>&lt;audio&gt;\n  &lt;source src=\"audioFile.mp3\" type=\"audio/mp3\"&gt;\n&lt;/audio&gt;\n</code></pre> <p>Neste exemplo, criamos um elemento <code>&lt;audio&gt;</code>. Em seguida, criamos um elemento <code>&lt;source&gt;</code> para encapsular nosso link de \u00e1udio. Neste caso, iAmAnAudioFile.mp3 \u00e9 nosso arquivo de \u00e1udio. Em seguida, especificamos o tipo usando type e nomeamos que tipo de \u00e1udio \u00e9. Embora nem sempre seja necess\u00e1rio, \u00e9 recomend\u00e1vel que declaremos o tipo de \u00e1udio, pois isso ajuda o navegador a identific\u00e1-lo mais facilmente e determinar se esse tipo de arquivo de \u00e1udio \u00e9 suportado pelo navegador.</p> <p>Vinculamos nosso arquivo de \u00e1udio ao navegador, mas agora precisamos dar a ele controles. \u00c9 aqui que os atributos entram. Os atributos fornecem informa\u00e7\u00f5es adicionais sobre um elemento.</p> <p>Os atributos nos permitem fazer muitas coisas diferentes com nosso arquivo de \u00e1udio. Existem muitos atributos para <code>&lt;audio&gt;</code>, mas hoje vamos nos concentrar em controles e <code>src</code>.</p> <p>controls: exibe automaticamente os controles de \u00e1udio no navegador, como reproduzir e silenciar.</p> <p><code>src</code>: especifica a URL do arquivo de \u00e1udio.</p> <p>Como voc\u00ea deve ter notado, j\u00e1 usamos o atributo <code>src</code> no c\u00f3digo de exemplo acima. A maioria dos atributos vai na tag de abertura de <code>&lt;audio&gt;</code>. Por exemplo, aqui est\u00e1 como poder\u00edamos adicionar a funcionalidade de reprodu\u00e7\u00e3o autom\u00e1tica e controles de \u00e1udio:</p> <pre><code>&lt;audio autoplay controls&gt;\n</code></pre> <p> <p>Voc\u00ea pode encontrar outros atributos aqui: Atributos \u00fateis</p>"},{"location":"html/semantica/figure-figcaption/","title":"Semantica","text":""},{"location":"html/semantica/figure-figcaption/#figure-e-figcaption","title":"Figure e Figcaption","text":"<p>Com <code>&lt;aside&gt;</code>, aprendemos que podemos colocar informa\u00e7\u00f5es adicionais ao lado de uma parte principal do conte\u00fado, mas e se quis\u00e9ssemos adicionar uma imagem ou ilustra\u00e7\u00e3o? \u00c9 a\u00ed que <code>&lt;figure&gt;</code> e <code>&lt;figcaption&gt;</code> entram.</p> <p><code>&lt;figure&gt;</code> \u00e9 um elemento usado para encapsular m\u00eddia, como uma imagem, ilustra\u00e7\u00e3o, diagrama, trecho de c\u00f3digo, etc., que \u00e9 referenciado no fluxo principal do documento.</p> <pre><code>&lt;figure&gt;\n  &lt;img src=\"overwatch.png\"&gt;\n&lt;/figure&gt;\n</code></pre> <p>Neste c\u00f3digo, criamos um elemento <code>&lt;figure&gt;</code> para que possamos encapsular nossa tag <code>&lt;img&gt;</code>. Em <code>&lt;figure&gt;</code>, usamos a tag <code>&lt;img&gt;</code> para inserir uma imagem na p\u00e1gina da web. Usamos o atributo src dentro da tag <code>&lt;img&gt;</code> para que possamos vincular a fonte da imagem.</p> <p>\u00c9 poss\u00edvel adicionar uma legenda \u00e0 imagem usando <code>&lt;figcaption&gt;</code>.</p> <p><code>&lt;figcaption&gt;</code> \u00e9 um elemento usado para descrever a m\u00eddia na tag <code>&lt;figure&gt;</code>. Normalmente, <code>&lt;figcaption&gt;</code> ficar\u00e1 dentro de <code>&lt;figure&gt;</code>. Isso \u00e9 diferente de usar um elemento <code>&lt;p&gt;</code> para descrever o conte\u00fado; se decidirmos alterar a localiza\u00e7\u00e3o de <code>&lt;figure&gt;</code>, a tag de par\u00e1grafo pode ser deslocada da figura enquanto um <code>&lt;figcaption&gt;</code> se mover\u00e1 com a figura. Isso \u00e9 \u00fatil para agrupar uma imagem com uma legenda.</p> <pre><code>&lt;figure&gt;\n  &lt;img src=\"overwatch.png\"&gt;\n  &lt;figcaption&gt;\n    Esta imagem mostra personagens de Overwatch.\n  &lt;/figcaption&gt;\n&lt;/figure&gt;\n</code></pre>      Esta imagem mostra personagens de Overwatch.    <p>No exemplo acima, adicionamos um <code>&lt;figcaption&gt;</code> ao elemento <code>&lt;figure&gt;</code> para descrever a imagem do exemplo anterior. Isso ajuda a agrupar o conte\u00fado <code>&lt;figure&gt;</code> com o conte\u00fado <code>&lt;figcaption&gt;</code>.</p> <p>Embora o conte\u00fado em <code>&lt;figure&gt;</code> esteja relacionado ao fluxo principal do documento, sua posi\u00e7\u00e3o \u00e9 independente. Isso significa que voc\u00ea pode remov\u00ea-lo ou mov\u00ea-lo para outro lugar sem afetar o fluxo do documento.</p>"},{"location":"html/semantica/header-nav/","title":"Sem\u00e2ntica","text":""},{"location":"html/semantica/header-nav/#header-e-nav","title":"Header e Nav","text":"<p>Vamos dar uma olhada em alguns elementos sem\u00e2nticos que auxiliam na estrutura de uma p\u00e1gina da web. Um <code>&lt;header&gt;</code> \u00e9 um cont\u00eainer geralmente para links de navega\u00e7\u00e3o ou conte\u00fado introdut\u00f3rio contendo t\u00edtulos de <code>&lt;h1&gt;</code> a <code>&lt;h6&gt;</code>.</p> <p>O exemplo abaixo mostra <code>&lt;header&gt;</code> em a\u00e7\u00e3o:</p> <pre><code>&lt;header&gt;\n  &lt;h1&gt;\n    Tudo o que voc\u00ea precisa saber sobre pizza!\n  &lt;/h1&gt;\n&lt;/header&gt;\n</code></pre>        Tudo o que voc\u00ea precisa saber sobre pizza!      <p>Isso pode ser comparado ao c\u00f3digo abaixo que usa uma tag <code>&lt;div&gt;</code> em vez de uma tag <code>&lt;header&gt;</code>:</p> <pre><code>&lt;div id=\"header\"&gt;\n  &lt;h1&gt;\n    Tudo o que voc\u00ea precisa saber sobre pizza!\n  &lt;/h1&gt;\n&lt;/div&gt;\n</code></pre>        Tudo o que voc\u00ea precisa saber sobre pizza!      <p>Ao usar uma tag <code>&lt;header&gt;</code>, nosso c\u00f3digo se torna mais f\u00e1cil de ler. \u00c9 muito mais f\u00e1cil identificar o que est\u00e1 dentro das tags pai do <code>&lt;h1&gt;</code>, em oposi\u00e7\u00e3o a uma tag <code>&lt;div&gt;</code> que n\u00e3o forneceria detalhes sobre o que estava dentro da tag.</p> <p>Um <code>&lt;nav&gt;</code> \u00e9 usado para definir um bloco de links de navega\u00e7\u00e3o, como menus e tabelas de conte\u00fado. \u00c9 importante notar que <code>&lt;nav&gt;</code> pode ser usado dentro do elemento <code>&lt;header&gt;</code>, mas tamb\u00e9m pode ser usado sozinho.</p> <p>Vamos dar uma olhada no exemplo abaixo:</p> <pre><code>&lt;header&gt;\n  &lt;nav&gt;\n    &lt;ul&gt;\n      &lt;li&gt;&lt;a href=\"#home\"&gt;Home&lt;/a&gt;&lt;/li&gt;\n      &lt;li&gt;&lt;a href=\"#about\"&gt;About&lt;/a&gt;&lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/nav&gt;\n&lt;/header&gt;\n</code></pre> <ul> <li>Home</li> <li>About</li> </ul> <p>Ao usar <code>&lt;nav&gt;</code> como uma forma de rotular nossos links de navega\u00e7\u00e3o, ser\u00e1 mais f\u00e1cil n\u00e3o apenas para n\u00f3s, mas tamb\u00e9m para navegadores da web e leitores de tela lerem o c\u00f3digo.</p>"},{"location":"html/semantica/intro/","title":"Sem\u00e2ntica","text":"<p>Ao construir p\u00e1ginas da web, usamos uma combina\u00e7\u00e3o de HTML n\u00e3o sem\u00e2ntico e HTML sem\u00e2ntico. A palavra sem\u00e2ntico significa \"relacionado ao significado\", ent\u00e3o elementos sem\u00e2nticos fornecem informa\u00e7\u00f5es sobre o conte\u00fado entre as tags de abertura e fechamento.</p> <p>Ao usar HTML sem\u00e2ntico, selecionamos elementos HTML com base em seu significado, n\u00e3o em como eles s\u00e3o apresentados. Elementos como <code>&lt;div&gt;</code> e <code>&lt;span&gt;</code> n\u00e3o s\u00e3o elementos sem\u00e2nticos, pois n\u00e3o fornecem contexto sobre o que est\u00e1 dentro dessas tags.</p> <p>Por exemplo, em vez de usar um elemento <code>&lt;div&gt;</code> para conter nossas informa\u00e7\u00f5es de cabe\u00e7alho, poder\u00edamos usar um elemento <code>&lt;header&gt;</code>, que \u00e9 usado como uma se\u00e7\u00e3o de t\u00edtulo. Ao usar uma tag <code>&lt;header&gt;</code> em vez de uma <code>&lt;div&gt;</code>, fornecemos contexto sobre quais informa\u00e7\u00f5es est\u00e3o dentro da tag de abertura e fechamento.</p> <p>Por que usar HTML sem\u00e2ntico?</p> <p>Acessibilidade: O HTML sem\u00e2ntico torna as p\u00e1ginas da web acess\u00edveis para dispositivos m\u00f3veis e tamb\u00e9m para pessoas com defici\u00eancia. Isso ocorre porque leitores de tela e navegadores conseguem interpretar melhor o c\u00f3digo.</p> <p>SEO: melhora o SEO do site, ou Search Engine Optimization, que \u00e9 o processo de aumentar o n\u00famero de pessoas que visitam sua p\u00e1gina da web. Com um SEO melhor, os mecanismos de busca conseguem identificar melhor o conte\u00fado do seu site e ponderar o conte\u00fado mais importante adequadamente.</p> <p>F\u00e1cil de entender: o HTML sem\u00e2ntico tamb\u00e9m torna o c\u00f3digo-fonte do site mais f\u00e1cil de ler para outros desenvolvedores da web.</p> <p>Para entender melhor isso, voc\u00ea pode pensar em comparar o HTML n\u00e3o sem\u00e2ntico a entrar em uma loja sem placas nos corredores. Como os corredores n\u00e3o s\u00e3o etiquetados, voc\u00ea n\u00e3o sabe quais produtos est\u00e3o nesses corredores. No entanto, as lojas que t\u00eam placas para cada corredor tornam muito mais f\u00e1cil encontrar os itens de que voc\u00ea precisa, assim como o HTML sem\u00e2ntico.</p>"},{"location":"html/semantica/main-footer/","title":"Sem\u00e2ntica","text":""},{"location":"html/semantica/main-footer/#main-e-footer","title":"Main e Footer","text":"<p>Mais dois elementos estruturais s\u00e3o <code>&lt;main&gt;</code> e <code>&lt;footer&gt;</code>. Esses elementos, juntamente com <code>&lt;nav&gt;</code> e <code>&lt;header&gt;</code>, ajudam a descrever onde um elemento est\u00e1 localizado com base nos padr\u00f5es convencionais de desenvolvimento web.</p> <p>O elemento <code>&lt;main&gt;</code> \u00e9 usado para encapsular o conte\u00fado dominante dentro de uma p\u00e1gina da web. Esta tag \u00e9 separada do <code>&lt;footer&gt;</code> e do <code>&lt;nav&gt;</code> de uma p\u00e1gina da web, pois esses elementos n\u00e3o cont\u00eam o conte\u00fado principal. Ao usar <code>&lt;main&gt;</code> em vez de um elemento <code>&lt;div&gt;</code>, os leitores de tela e navegadores da web s\u00e3o mais capazes de identificar que o que quer que esteja dentro da tag \u00e9 a maior parte do conte\u00fado.</p> <p>Ent\u00e3o, como <code>&lt;main&gt;</code> fica quando incorporado ao nosso c\u00f3digo? Essa \u00e9 uma \u00f3tima pergunta.</p> <pre><code>&lt;main&gt;\n  &lt;header&gt;\n    &lt;h1&gt;Tipos de esportes&lt;/h1&gt;\n  &lt;/header&gt;\n  &lt;article&gt;\n    &lt;h3&gt;Beisebol&lt;/h3&gt;\n    &lt;p&gt;\n      O primeiro jogo de beisebol foi disputado em Cooperstown, Nova York, no ver\u00e3o de 1839.\n    &lt;/p&gt;\n  &lt;/article&gt;\n&lt;/main&gt;\n</code></pre> Tipos de esportes Beisebol <p>         O primeiro jogo de beisebol foi disputado em Cooperstown, Nova York, no ver\u00e3o de 1839.       </p> <p>Como vemos acima, <code>&lt;main&gt;</code> cont\u00e9m uma tag <code>&lt;article&gt;</code> e <code>&lt;header&gt;</code> com elementos filhos que cont\u00eam as informa\u00e7\u00f5es mais importantes relacionadas \u00e0 p\u00e1gina.</p> <p>O conte\u00fado na parte inferior das informa\u00e7\u00f5es do assunto \u00e9 conhecido como rodap\u00e9, indicado pelo elemento <code>&lt;footer&gt;</code>. O rodap\u00e9 cont\u00e9m informa\u00e7\u00f5es como:</p> <ul> <li> <p>Informa\u00e7\u00f5es de contato</p> </li> <li> <p>Informa\u00e7\u00f5es de direitos autorais</p> </li> <li> <p>Termos de uso</p> </li> <li> <p>Mapa do site</p> </li> <li> <p>Refer\u00eancia aos links do topo da p\u00e1gina</p> </li> </ul> <p>Por exemplo:</p> <pre><code>&lt;footer&gt;\n  &lt;p&gt;Envie-me um e-mail...&lt;/p&gt;\n&lt;/footer&gt;\n</code></pre> <p>Envie-me um e-mail...</p> <p>No exemplo acima, o rodap\u00e9 \u00e9 usado para conter informa\u00e7\u00f5es de contato. A tag <code>&lt;footer&gt;</code> \u00e9 separada do elemento <code>&lt;main&gt;</code> e normalmente est\u00e1 localizada na parte inferior do conte\u00fado.</p>"},{"location":"html/semantica/video-embed/","title":"Semantica","text":""},{"location":"html/semantica/video-embed/#video-e-embed","title":"Video e Embed","text":"<p>Conforme demonstrado no exerc\u00edcio anterior, o conte\u00fado de m\u00eddia pode ser uma adi\u00e7\u00e3o \u00fatil a um site. Ao usar um elemento <code>&lt;video&gt;</code>, podemos adicionar v\u00eddeos ao nosso site. O elemento <code>&lt;video&gt;</code> deixa claro que um desenvolvedor est\u00e1 tentando exibir um v\u00eddeo para o usu\u00e1rio.</p> <p>Alguns atributos que podem alterar a reprodu\u00e7\u00e3o de um v\u00eddeo incluem:</p> <ul> <li><code>controls</code>: quando adicionado, um bot\u00e3o de reprodu\u00e7\u00e3o/pausa ser\u00e1 adicionado ao v\u00eddeo junto com o controle de volume e uma op\u00e7\u00e3o de tela cheia.</li> <li><code>autoplay</code>: o atributo que resulta na reprodu\u00e7\u00e3o autom\u00e1tica de um v\u00eddeo assim que a p\u00e1gina \u00e9 carregada.</li> <li><code>loop</code>: este atributo resulta na reprodu\u00e7\u00e3o cont\u00ednua do v\u00eddeo em repeti\u00e7\u00e3o.   Abaixo est\u00e1 um exemplo de <code>&lt;video&gt;</code> sendo usado com o atributo controls:</li> </ul> <pre><code>&lt;video src=\"coding.mp4\" controls&gt;V\u00eddeo n\u00e3o suportado&lt;/video&gt;\n</code></pre> V\u00eddeo n\u00e3o suportado <p>No c\u00f3digo acima, um arquivo de v\u00eddeo chamado coding.mp4 est\u00e1 sendo reproduzido. O \"V\u00eddeo n\u00e3o suportado\" s\u00f3 ser\u00e1 exibido se o navegador n\u00e3o conseguir exibir o v\u00eddeo.</p> <p>Outra tag que pode ser usada para incorporar conte\u00fado de m\u00eddia em uma p\u00e1gina \u00e9 a tag <code>&lt;embed&gt;</code>, que pode incorporar qualquer conte\u00fado de m\u00eddia, incluindo v\u00eddeos, arquivos de \u00e1udio e gifs de uma fonte externa. Isso significa que sites que t\u00eam um bot\u00e3o de incorpora\u00e7\u00e3o t\u00eam alguma forma de conte\u00fado de m\u00eddia que pode ser adicionado a outros sites. A tag <code>&lt;embed&gt;</code> \u00e9 uma tag de fechamento autom\u00e1tico, diferente do elemento <code>&lt;video&gt;</code>. Observe que <code>&lt;embed&gt;</code> \u00e9 uma tag obsoleta e outras alternativas, como <code>&lt;video&gt;</code>, <code>&lt;audio&gt;</code> e <code>&lt;img&gt;</code>, devem ser usadas em seu lugar, mas est\u00e3o sendo ensinadas para fins de legado.</p> <p>Abaixo, daremos uma olhada em <code>&lt;embed&gt;</code> sendo usado em a\u00e7\u00e3o.</p> <pre><code>&lt;embed src=\"download.gif\"/&gt;\n</code></pre> <p></p> <p>No exemplo acima, <code>&lt;embed&gt;</code> est\u00e1 sendo usado para adicionar um gif de um arquivo local conhecido como download.gif. Embed pode ser usado para adicionar arquivos locais, bem como conte\u00fado de m\u00eddia diretamente de alguns outros sites.</p>"},{"location":"js/","title":"JavaScript","text":""},{"location":"ts/","title":"TypeScript","text":""}]}